Index: Resizer.java
===================================================================
--- Resizer.java	(r√©vision 25036)
+++ Resizer.java	(copie de travail)
@@ -164,32 +164,33 @@
 
         //iterate through all thre active resources to find idle-time lapsed ones.
         ResourceHandle h;
-        Set<String> activeResources = new HashSet<String>();
+		Set<ResourceHandle> activeHandles = new HashSet<ResourceHandle>();
         while ((h = ds.getResource()) != null ) {
             state = h.getResourceState();
             //remove all idle-time lapsed resources.
             if (currentTime - state.getTimestamp() > pool.getIdleTimeout()) {
                 ds.removeResource(h);
             } else {
-                ds.returnResource(h);
-                activeResources.add(h.toString());
+                //returning resource at this point may generate infintie loops
+                //ds.returnResource(h);
+                activeHandles.add(h);
             }
         }
 
         //remove invalid resources from the free (active) resources list.
         //Since the whole pool is not locked, it may happen that some of these resources may be
-        //given to applications.
-        removeInvalidResources(activeResources);
+        //given to applications.        
+        removeInvalidResources(activeHandles);
 
         //These statistic computations will work fine as long as resizer locks the pool throughout its operations.
         debug("Number of Idle resources freed for pool [ " + poolName + " ] - " +
-                (size - activeResources.size()));
+                (size - activeHandles.size()));
         debug("Number of Invalid resources removed for pool [ " + poolName + " ] - " +
-                (activeResources.size() - ds.getFreeListSize()));
+                (activeHandles.size() - ds.getFreeListSize()));
         noOfResourcesRemoved = poolSizeBeforeRemoval - ds.getResourcesSize();
         return noOfResourcesRemoved;
     }
-
+	
     /**
      * Removes invalid resource handles in the pool while resizing the pool.
      * Uses the Connector 1.5 spec 6.5.3.4 optional RA feature to obtain
@@ -197,41 +198,34 @@
      *
      * @param freeConnectionsToValidate Set of free connections
      */
-    private void removeInvalidResources(Set<String> freeConnectionsToValidate) {
+    private void removeInvalidResources(Set<ResourceHandle> freeConnectionsToValidate) {
         try {
             debug("Sending a set of free connections to RA, " +
                     "of size : " + freeConnectionsToValidate.size());
             int invalidConnectionsCount = 0;
-            ResourceHandle handle;
             Set<ResourceHandle> validResources = new HashSet<ResourceHandle>();
             try {
-                while ((handle = ds.getResource()) != null ) {
-                    //validate if the connection is one in the freeConnectionsToValidate
-                    if (freeConnectionsToValidate.contains(handle.toString())) {
-                        Set connectionsToTest = new HashSet();
-                        connectionsToTest.add(handle.getResource());
-                        Set invalidConnections = handler.getInvalidConnections(connectionsToTest);
-                        if (invalidConnections != null && invalidConnections.size() > 0) {
-                            for (Object o : invalidConnections) {
-                                ManagedConnection invalidConnection = (ManagedConnection)o;
-                                if(invalidConnection.equals(handle.getResource())){
-                                    ds.removeResource(handle);
-                                    handler.invalidConnectionDetected(handle);
-                                    invalidConnectionsCount++;
-                                }else{
-                                    //TODO V3 log fine - cannot happen
-                                }
-                            }
-                        } else {
-                            //valid resource, return to pool
-                            validResources.add(handle);
+			    for (ResourceHandle handle : freeConnectionsToValidate) {
+					Set connectionsToTest = new HashSet();
+                    connectionsToTest.add(handle.getResource());
+                    Set invalidConnections = handler.getInvalidConnections(connectionsToTest);
+                    if (invalidConnections != null && invalidConnections.size() > 0) {
+                       for (Object o : invalidConnections) {
+                          ManagedConnection invalidConnection = (ManagedConnection)o;
+                          if(invalidConnection.equals(handle.getResource())){
+                            ds.removeResource(handle);
+                            handler.invalidConnectionDetected(handle);
+                            invalidConnectionsCount++;
+                          }else{
+                            //TODO V3 log fine - cannot happen
+                          }
                         }
                     } else {
-                        //valid resource, return to pool
-                        validResources.add(handle);
-                    }
-                }
-            } finally {
+                       //valid resource, return to pool
+                       validResources.add(handle);
+					}
+			    }
+		    } finally {
                 for(ResourceHandle resourceHandle : validResources){
                     ds.returnResource(resourceHandle);
                 }
