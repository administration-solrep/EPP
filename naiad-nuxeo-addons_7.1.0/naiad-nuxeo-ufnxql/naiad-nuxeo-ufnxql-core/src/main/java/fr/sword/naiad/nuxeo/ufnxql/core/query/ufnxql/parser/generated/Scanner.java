/* The following code was generated by JFlex 1.4.3 on 5/26/14 4:12 PM */

/*
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Nuxeo - initial API and implementation
 *
 *
 * $Id$
 */
package fr.sword.naiad.nuxeo.ufnxql.core.query.ufnxql.parser.generated;

import java_cup.runtime.*;
import org.nuxeo.ecm.core.query.*;

/**
 * Lexer for NXQL
 */

@SuppressWarnings("all")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int SQ_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\61\1\74\1\105"+
    "\1\0\1\4\1\0\1\73\1\106\1\101\1\102\1\75\1\14\1\103"+
    "\1\15\1\7\1\10\1\11\11\12\1\5\1\0\1\77\1\76\1\100"+
    "\1\104\1\0\1\43\1\57\1\21\1\47\1\17\1\27\1\66\1\40"+
    "\1\51\1\6\1\55\1\20\1\32\1\45\1\31\1\64\1\6\1\30"+
    "\1\16\1\22\1\53\1\70\1\37\1\6\1\62\1\6\1\0\1\107"+
    "\2\0\1\6\1\0\1\44\1\60\1\24\1\50\1\13\1\36\1\67"+
    "\1\41\1\52\1\6\1\56\1\23\1\35\1\46\1\34\1\65\1\6"+
    "\1\33\1\26\1\25\1\54\1\71\1\42\1\6\1\63\1\6\1\0"+
    "\1\72\45\0\4\4\4\0\1\4\12\0\1\4\4\0\1\4\5\0"+
    "\27\4\1\0\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0"+
    "\5\4\11\0\1\4\213\0\1\4\13\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\0\24\4\1\0\54\4\1\0\46\4\1\0\5\4\4\0"+
    "\202\4\10\0\105\4\1\0\46\4\2\0\2\4\6\0\20\4\41\0"+
    "\46\4\2\0\1\4\7\0\47\4\110\0\33\4\5\0\3\4\56\0"+
    "\32\4\5\0\13\4\43\0\2\4\1\0\143\4\1\0\1\4\17\0"+
    "\2\4\7\0\2\4\12\0\3\4\2\0\1\4\20\0\1\4\1\0"+
    "\36\4\35\0\3\4\60\0\46\4\13\0\1\4\u0152\0\66\4\3\0"+
    "\1\4\22\0\1\4\7\0\12\4\43\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\36\0"+
    "\2\4\1\0\3\4\16\0\4\4\21\0\6\4\4\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\37\0"+
    "\4\4\1\0\1\4\23\0\3\4\20\0\11\4\1\0\3\4\1\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4\22\0"+
    "\1\4\17\0\2\4\17\0\1\4\23\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4\36\0"+
    "\2\4\1\0\3\4\17\0\1\4\21\0\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\10\4\1\0\3\4\77\0\1\4\13\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\46\0"+
    "\2\4\43\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\3\0\1\4\40\0\1\4\1\0\2\4\43\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\20\4\46\0\2\4\43\0\22\4\3\0"+
    "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0\60\4\1\0"+
    "\2\4\13\0\10\4\72\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4\11\0"+
    "\1\4\2\0\5\4\1\0\1\4\25\0\2\4\42\0\1\4\77\0"+
    "\10\4\1\0\42\4\35\0\4\4\164\0\42\4\1\0\5\4\1\0"+
    "\2\4\45\0\6\4\112\0\46\4\12\0\51\4\7\0\132\4\5\0"+
    "\104\4\5\0\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0"+
    "\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0"+
    "\1\4\1\0\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0"+
    "\27\4\1\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\47\4\1\0\23\4\105\0\125\4\14\0\u026c\4\2\0\10\4\12\0"+
    "\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4\16\0"+
    "\22\4\16\0\22\4\16\0\15\4\1\0\3\4\17\0\64\4\43\0"+
    "\1\4\3\0\2\4\103\0\130\4\10\0\51\4\127\0\35\4\63\0"+
    "\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0\132\4\6\0"+
    "\26\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\102\0\2\4\23\0"+
    "\1\4\34\0\1\4\15\0\1\4\40\0\22\4\120\0\1\4\4\0"+
    "\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0"+
    "\3\4\5\0\5\4\26\0\44\4\u0e81\0\3\4\31\0\11\4\7\0"+
    "\5\4\2\0\5\4\4\0\126\4\6\0\3\4\1\0\137\4\5\0"+
    "\50\4\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0\u19b6\4\112\0"+
    "\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0"+
    "\7\4\14\0\5\4\5\0\1\4\1\0\12\4\1\0\15\4\1\0"+
    "\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0"+
    "\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\66\0\2\4\30\0"+
    "\3\4\31\0\1\4\6\0\5\4\1\0\207\4\7\0\1\4\34\0"+
    "\32\4\4\0\1\4\1\0\32\4\12\0\132\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\1\1\4\2\5\1\6"+
    "\1\7\34\3\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\25\1\30\1\27\1\3\1\0\2\31"+
    "\1\0\15\3\2\32\1\3\1\32\4\3\1\33\2\3"+
    "\1\33\14\3\1\34\1\3\1\35\10\3\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\31\1\0\27\3\1\50\1\51\1\52\1\53\21\3"+
    "\1\46\5\3\1\54\5\3\1\55\11\3\1\56\1\57"+
    "\1\60\17\3\1\61\10\3\1\62\4\3\1\63\1\64"+
    "\5\3\1\65\5\3\1\66\3\0\1\67\4\3\3\0"+
    "\4\3\2\0\2\3\1\70\2\0\4\3\1\71\1\72"+
    "\1\73\2\3\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\330\0\u0168\0\u01b0"+
    "\0\330\0\u01f8\0\u0240\0\330\0\330\0\u0288\0\u02d0\0\u0318"+
    "\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558"+
    "\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798"+
    "\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\330\0\330\0\u0a68\0\330\0\330\0\u0ab0\0\u0af8"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\u0b40\0\330"+
    "\0\u0b88\0\u0bd0\0\330\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u01f8"+
    "\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30"+
    "\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170"+
    "\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0"+
    "\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0"+
    "\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u0168\0\u17e8"+
    "\0\u0168\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0"+
    "\0\u1a28\0\330\0\330\0\330\0\330\0\330\0\330\0\330"+
    "\0\330\0\u1a70\0\u1ab8\0\u1b00\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058"+
    "\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8"+
    "\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8"+
    "\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u0168"+
    "\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u0168\0\u29a0\0\u29e8"+
    "\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u0168"+
    "\0\u0168\0\u0168\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0"+
    "\0\u3018\0\u0168\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8"+
    "\0\u3210\0\u3258\0\u0168\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u0168"+
    "\0\u0168\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u0168\0\u3528"+
    "\0\u3570\0\u35b8\0\u3600\0\u3648\0\u0168\0\u3690\0\u36d8\0\u3720"+
    "\0\u0168\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918"+
    "\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58"+
    "\0\u0168\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\330"+
    "\0\u0168\0\330\0\u3d50\0\u3d98\0\u0168\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\4\1\7\1\10\1\11"+
    "\1\12\1\13\1\7\1\14\1\15\1\16\1\7\1\17"+
    "\1\7\1\20\1\21\1\7\1\22\1\23\1\24\1\7"+
    "\1\25\2\7\1\26\1\7\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\2\7\1\46\1\47\1\6\4\7"+
    "\1\50\1\51\2\7\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\4\1\67\2\4\103\67\1\70\1\71\1\72\2\4"+
    "\102\72\1\73\1\72\1\74\112\0\1\6\112\0\2\7"+
    "\1\75\1\76\3\7\1\0\44\7\1\0\10\7\27\0"+
    "\2\77\104\0\1\77\1\0\2\100\1\101\3\0\1\101"+
    "\77\0\1\77\1\0\2\13\1\101\3\0\1\101\75\0"+
    "\2\7\1\75\1\76\2\7\1\102\1\0\2\7\1\103"+
    "\2\7\1\104\2\7\1\105\33\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\34\7\1\106\1\107"+
    "\6\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\34\7\1\110\1\111\6\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\35\7\1\107\6\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\35\7\1\112\6\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\2\7\1\102\1\0\10\7\1\113\33\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\13\7"+
    "\1\114\2\7\1\115\25\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\12\7\1\116\1\117\2\7"+
    "\1\120\2\7\1\121\22\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\16\7\1\122\2\7\1\121"+
    "\22\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\16\7\1\115\25\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\23\7\1\123\1\124\17\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\26\7\1\125\1\126\14\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\27\7\1\126\14\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\24\7"+
    "\1\124\17\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\1\7\1\127\1\7\1\130\2\7\1\131"+
    "\2\7\1\132\16\7\1\133\1\134\12\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\6\7\1\131"+
    "\2\7\1\132\17\7\1\134\12\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\14\7\1\135\2\7"+
    "\1\136\16\7\1\137\1\140\4\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\17\7\1\136\17\7"+
    "\1\140\4\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\2\7\1\141\1\0\2\7\1\142\23\7\1\143\1\144"+
    "\4\7\1\145\1\146\6\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\2\7\1\141\1\0\27\7\1\144\5\7"+
    "\1\146\6\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\1\7\1\147\1\7\1\150\5\7\1\147"+
    "\16\7\2\151\12\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\6\7\1\152\2\7\1\147\17\7"+
    "\1\151\12\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\30\7\1\153\1\154\12\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\31\7\1\154"+
    "\12\7\1\0\10\7\23\0\2\7\1\75\1\76\2\7"+
    "\1\155\1\0\2\7\1\156\41\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\2\7\1\155\1\0\44\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\13\7"+
    "\1\157\2\7\1\160\25\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\16\7\1\161\25\7\1\0"+
    "\10\7\114\0\1\162\107\0\1\163\1\0\1\162\105\0"+
    "\1\164\11\0\1\67\2\0\103\67\27\0\1\165\5\0"+
    "\1\166\12\0\1\167\37\0\1\170\1\0\1\72\2\0"+
    "\102\72\1\0\1\72\26\0\1\165\5\0\1\166\12\0"+
    "\1\167\36\0\1\171\6\0\1\172\2\7\1\75\1\76"+
    "\3\7\1\0\44\7\1\0\10\7\22\0\1\173\1\0"+
    "\1\173\4\0\1\173\2\0\43\173\1\0\10\173\27\0"+
    "\2\77\1\101\3\0\1\101\101\0\2\174\1\0\2\175"+
    "\77\0\2\7\1\75\1\76\3\7\1\0\6\7\1\176"+
    "\35\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\3\7\1\177\40\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\26\7\1\200\15\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\27\7"+
    "\1\201\14\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\15\7\1\202\22\7\1\203\3\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\20\7"+
    "\1\204\20\7\1\205\2\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\15\7\1\206\26\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\20\7"+
    "\1\207\23\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\20\7\1\210\23\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\27\7\1\211\14\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\14\7\1\212\27\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\17\7\1\213\24\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\12\7\1\214"+
    "\31\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\32\7\1\215\11\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\33\7\1\216\10\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\21\7"+
    "\1\217\22\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\33\7\1\220\10\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\2\7\1\221\41\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\2\7\1\222"+
    "\1\0\44\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\44\7\1\0\6\7\1\223\1\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\44\7\1\0\7\7"+
    "\1\224\23\0\2\7\1\75\1\76\3\7\1\0\4\7"+
    "\1\225\37\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\3\7\1\226\40\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\6\7\1\226\35\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\7\7\1\225\34\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\32\7\1\227\11\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\33\7\1\227"+
    "\10\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\5\7\1\230\36\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\10\7\1\230\33\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\3\7"+
    "\1\231\40\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\6\7\1\232\35\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\11\7\1\233\32\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\1\7\1\234\42\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\5\7\1\235\36\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\10\7\1\236"+
    "\33\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\1\7\1\237\42\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\11\7\1\240\32\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\34\7"+
    "\1\241\1\242\6\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\35\7\1\242\6\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\34\7\1\243"+
    "\7\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\35\7\1\244\6\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\10\7\1\245\33\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\5\7"+
    "\1\246\36\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\14\7\1\247\27\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\17\7\1\250\24\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\17\7\1\251\24\7\1\0\10\7\23\0\2\172\1\252"+
    "\1\0\3\172\1\0\44\172\1\0\10\172\23\0\3\173"+
    "\1\76\3\173\1\0\44\173\1\0\10\173\27\0\2\174"+
    "\102\0\2\7\1\75\1\76\2\7\1\253\1\0\44\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\2\7\1\254\41\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\13\7\1\255\30\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\16\7\1\256"+
    "\25\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\34\7\1\257\7\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\2\7\1\260\41\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\35\7"+
    "\1\261\6\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\2\7\1\260\1\0\44\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\2\7\1\262\41\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\2\7\1\263\1\0"+
    "\44\7\1\0\10\7\23\0\2\7\1\75\1\76\2\7"+
    "\1\264\1\0\44\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\16\7\1\265\25\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\15\7\1\266"+
    "\26\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\20\7\1\266\23\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\1\7\1\267\42\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\2\7"+
    "\1\270\41\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\2\7\1\271\1\0\44\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\11\7\1\272\32\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\2\7\1\273\1\0"+
    "\44\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\13\7\1\274\30\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\16\7\1\275\25\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\34\7"+
    "\1\276\7\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\35\7\1\277\6\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\3\7\1\300\40\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\6\7\1\300\35\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\7\7\1\301\34\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\4\7\1\301"+
    "\37\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\2\7\1\302\41\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\2\7\1\302\1\0\44\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\5\7\1\303"+
    "\36\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\10\7\1\304\33\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\40\7\1\305\3\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\41\7"+
    "\1\306\2\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\14\7\1\307\27\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\17\7\1\310\24\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\25\7\1\311\16\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\22\7\1\312\21\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\36\7\1\313"+
    "\5\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\37\7\1\314\4\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\37\7\1\315\4\7\1\0"+
    "\10\7\22\0\3\172\1\252\1\0\3\172\1\0\44\172"+
    "\1\0\10\172\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\7\7\1\316\34\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\4\7\1\317\37\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\5\7\1\320"+
    "\36\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\10\7\1\321\33\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\5\7\1\322\36\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\10\7"+
    "\1\322\33\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\1\7\1\323\42\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\1\7\1\324\7\7"+
    "\1\324\32\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\11\7\1\324\32\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\10\7\1\325\33\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\2\7\1\326\41\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\13\7\1\327\30\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\16\7\1\330"+
    "\25\7\1\0\10\7\23\0\2\7\1\75\1\76\2\7"+
    "\1\331\1\0\44\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\16\7\1\332\25\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\2\7\1\333"+
    "\41\7\1\0\10\7\23\0\2\7\1\75\1\76\2\7"+
    "\1\333\1\0\44\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\30\7\1\334\13\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\31\7\1\335"+
    "\12\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\34\7\1\336\7\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\35\7\1\337\6\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\2\7"+
    "\1\340\41\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\2\7\1\340\1\0\44\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\30\7\1\341\13\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\31\7"+
    "\1\341\12\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\2\7\1\342\1\0\44\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\2\7\1\343\41\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\44\7"+
    "\1\0\2\7\1\344\5\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\44\7\1\0\3\7\1\345\4\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\44\7\1\0\3\7"+
    "\1\346\4\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\10\7\1\347\33\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\5\7\1\347\36\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\1\7\1\350"+
    "\42\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\11\7\1\351\32\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\5\7\1\352\36\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\10\7"+
    "\1\353\33\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\11\7\1\354\32\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\5\7\1\355\36\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\44\7\1\356\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\44\7\1\357\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\10\7\1\355\33\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\44\7\1\360\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\44\7\1\0"+
    "\4\7\1\361\3\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\44\7\1\0\5\7\1\361\2\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\30\7\1\362\13\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\31\7"+
    "\1\363\12\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\2\7\1\364\1\0\44\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\2\7\1\365\41\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\44\7"+
    "\1\366\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\44\7\1\367\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\44\7\1\370\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\22\7\1\371\21\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\22\7\1\372\2\7"+
    "\1\372\16\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\26\7\1\373\15\7\1\0\10\7\23\0"+
    "\2\7\1\75\1\76\3\7\1\0\27\7\1\374\14\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\25\7\1\372\16\7\1\0\10\7\75\0\1\375\107\0"+
    "\1\376\110\0\1\376\34\0\2\7\1\75\1\76\3\7"+
    "\1\0\4\7\1\377\37\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\7\7\1\u0100\34\7\1\0"+
    "\10\7\23\0\2\7\1\75\1\76\3\7\1\0\31\7"+
    "\1\u0101\12\7\1\0\10\7\23\0\2\7\1\75\1\76"+
    "\3\7\1\0\30\7\1\u0101\13\7\1\0\10\7\75\0"+
    "\1\u0102\107\0\1\u0103\110\0\1\u0103\34\0\2\7\1\75"+
    "\1\76\3\7\1\0\34\7\1\u0104\7\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\35\7\1\u0105"+
    "\6\7\1\0\10\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\15\7\1\u0106\26\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\20\7\1\u0107\23\7\1\0"+
    "\10\7\100\0\1\u0108\110\0\1\u0108\31\0\2\7\1\75"+
    "\1\76\3\7\1\0\5\7\1\u0109\36\7\1\0\10\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\10\7\1\u0109"+
    "\33\7\1\0\10\7\100\0\1\u010a\110\0\1\u010a\31\0"+
    "\2\7\1\75\1\76\3\7\1\0\5\7\1\u010b\36\7"+
    "\1\0\10\7\23\0\2\7\1\75\1\76\3\7\1\0"+
    "\10\7\1\u010c\33\7\1\0\10\7\23\0\2\7\1\75"+
    "\1\76\3\7\1\0\44\7\1\0\2\7\1\u010d\5\7"+
    "\23\0\2\7\1\75\1\76\3\7\1\0\44\7\1\0"+
    "\3\7\1\u010d\4\7\23\0\2\7\1\75\1\76\3\7"+
    "\1\0\23\7\1\u010e\20\7\1\0\10\7\23\0\2\7"+
    "\1\75\1\76\3\7\1\0\24\7\1\u010e\17\7\1\0"+
    "\10\7\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\34\1\2\11\1\1\2\11\2\1\6\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\0\2\1\1\0\60\1\10\11"+
    "\3\1\1\0\160\1\3\0\5\1\3\0\4\1\2\0"+
    "\3\1\2\0\4\1\1\11\1\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, -1, yychar, yytext());
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, -1, yychar, value);
  }

  private void scanError() throws QueryParseException {
    StringBuffer buf = new StringBuffer("Lexical Error: Illegal character <")
        .append(yytext()).append("> at offset ").append(yychar);
      throw new QueryParseException(buf.toString());
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1340) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 62: break;
        case 18: 
          { return symbol(sym.PARAM);
          }
        case 63: break;
        case 55: 
          { return symbol(sym.HAVING);
          }
        case 64: break;
        case 28: 
          { return symbol(sym.IS);
          }
        case 65: break;
        case 50: 
          { return symbol(sym.WHERE);
          }
        case 66: break;
        case 47: 
          { return symbol(sym.DESC);
          }
        case 67: break;
        case 14: 
          { return symbol(sym.GT);
          }
        case 68: break;
        case 58: 
          { return symbol(sym.DISTINCT);
          }
        case 69: break;
        case 33: 
          { string.append('\t');
          }
        case 70: break;
        case 6: 
          { return symbol(sym.SUM);
          }
        case 71: break;
        case 13: 
          { return symbol(sym.LT);
          }
        case 72: break;
        case 19: 
          { string.setLength(0); yybegin(STRING);
          }
        case 73: break;
        case 60: 
          { return symbol(sym.TIMESTAMP);
          }
        case 74: break;
        case 51: 
          { return symbol(sym.ILIKE);
          }
        case 75: break;
        case 32: 
          { return symbol(sym.GTEQ);
          }
        case 76: break;
        case 25: 
          { return symbol(sym.DOUBLE, yytext());
          }
        case 77: break;
        case 43: 
          { return symbol(sym.NOT);
          }
        case 78: break;
        case 42: 
          { return symbol(sym.AND);
          }
        case 79: break;
        case 4: 
          { return symbol(sym.DIV);
          }
        case 80: break;
        case 23: 
          { string.append('\\');
          }
        case 81: break;
        case 9: 
          { return symbol(sym.FROM_AND);
          }
        case 82: break;
        case 10: 
          { return symbol(sym.FROM_NOT);
          }
        case 83: break;
        case 34: 
          { string.append('\r');
          }
        case 84: break;
        case 56: 
          { return symbol(sym.BETWEEN);
          }
        case 85: break;
        case 54: 
          { return symbol(sym.OFFSET);
          }
        case 86: break;
        case 48: 
          { return symbol(sym.DATE);
          }
        case 87: break;
        case 40: 
          { return symbol(sym.ASC);
          }
        case 88: break;
        case 8: 
          { return symbol(sym.FROM_OR);
          }
        case 89: break;
        case 7: 
          { return symbol(sym.SUB);
          }
        case 90: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 91: break;
        case 37: 
          { string.append('\"');
          }
        case 92: break;
        case 41: 
          { return symbol(sym.ALL);
          }
        case 93: break;
        case 1: 
          { scanError();
          }
        case 94: break;
        case 57: 
          { return symbol(sym.ORDERBY);
          }
        case 95: break;
        case 36: 
          { string.append('\'');
          }
        case 96: break;
        case 24: 
          { yybegin(YYINITIAL);
                          return symbol(sym.STRING, string.toString());
          }
        case 97: break;
        case 44: 
          { return symbol(sym.LIKE);
          }
        case 98: break;
        case 26: 
          { return symbol(sym.OR);
          }
        case 99: break;
        case 29: 
          { return symbol(sym.IN);
          }
        case 100: break;
        case 12: 
          { return symbol(sym.EQ);
          }
        case 101: break;
        case 22: 
          { yybegin(YYINITIAL);
                          return symbol(sym.STRING,string.toString());
          }
        case 102: break;
        case 38: 
          { return symbol(sym.FROM_IDENTIFIER, yytext());
          }
        case 103: break;
        case 39: 
          { return symbol(sym.PATH_IDENTIFIER, yytext());
          }
        case 104: break;
        case 35: 
          { string.append('\n');
          }
        case 105: break;
        case 31: 
          { return symbol(sym.LTEQ);
          }
        case 106: break;
        case 27: 
          { return symbol(sym.AS);
          }
        case 107: break;
        case 15: 
          { return symbol(sym.LPARA);
          }
        case 108: break;
        case 45: 
          { return symbol(sym.FROM);
          }
        case 109: break;
        case 53: 
          { return symbol(sym.SELECT);
          }
        case 110: break;
        case 16: 
          { return symbol(sym.RPARA);
          }
        case 111: break;
        case 52: 
          { return symbol(sym.UNION);
          }
        case 112: break;
        case 61: 
          { return symbol(sym.STARTSWITH);
          }
        case 113: break;
        case 30: 
          { return symbol(sym.NOTEQ);
          }
        case 114: break;
        case 20: 
          { string.setLength(0); yybegin(SQ_STRING);
          }
        case 115: break;
        case 17: 
          { return symbol(sym.COMMA);
          }
        case 116: break;
        case 11: 
          { return symbol(sym.MUL);
          }
        case 117: break;
        case 59: 
          { return symbol(sym.GROUPBY);
          }
        case 118: break;
        case 21: 
          { string.append( yytext() );
          }
        case 119: break;
        case 5: 
          { return symbol(sym.INTEGER, yytext());
          }
        case 120: break;
        case 46: 
          { return symbol(sym.NULL);
          }
        case 121: break;
        case 49: 
          { return symbol(sym.LIMIT);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
