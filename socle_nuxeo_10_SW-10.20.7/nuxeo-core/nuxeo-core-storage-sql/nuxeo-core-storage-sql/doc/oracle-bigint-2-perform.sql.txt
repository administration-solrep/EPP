-- character uuid to bigint migration for Oracle
-- v0.3 2013-03-04

BEGIN
  -- conversion phase

  -- find foreign keys to HIERARCHY_PK (proxies has another fk for targetid)
  INSERT INTO tmp_fk
    SELECT table_name, constraint_name
    FROM user_constraints
    WHERE r_constraint_name = 'HIERARCHY_PK'
      AND constraint_type = 'R'
      AND r_owner = 'NUXEO'
    ORDER BY table_name, constraint_name;
  -- drop foreign key constraints to HIERARCHY_PK
  FOR rec in (SELECT table_name, constraint_name FROM tmp_fk) LOOP
    dbms_output.put_line('DROP FOREIGN KEY ' || rec.constraint_name);
    nx_execute('ALTER TABLE "' || rec.table_name || '" DROP CONSTRAINT "' || rec.constraint_name || '"');
  END LOOP;

  -- find primary keys (locks has a primary key that's not a fk)
  INSERT INTO tmp_pk
    SELECT c.table_name, c.constraint_name
    FROM user_constraints c
    WHERE constraint_type = 'P'
      AND c.table_name IN (SELECT table_name FROM tmp_fk UNION ALL SELECT 'LOCKS' FROM DUAL)
    ORDER BY c.table_name, c.constraint_name;
  -- drop primary keys
  FOR rec in (SELECT table_name, constraint_name FROM tmp_pk) LOOP
    dbms_output.put_line('DROP PRIMARY KEY ' || rec.constraint_name);
    nx_execute('ALTER TABLE "' || rec.table_name || '" DROP CONSTRAINT "' || rec.constraint_name || '"');
  END LOOP;

  -- find non-unique indexes
  INSERT INTO tmp_idx
    SELECT col.table_name, col.index_name
    FROM user_indexes i
    JOIN user_ind_columns col ON col.index_name = i.index_name 
    JOIN tmp_fk fk ON fk.table_name = col.table_name
    WHERE col.column_name = 'ID'
    ORDER BY col.table_name, col.index_name;
  -- drop non-unique indexes
  FOR rec in (SELECT table_name, index_name FROM tmp_idx) LOOP
    dbms_output.put_line('DROP INDEX ' || rec.index_name);
    nx_execute('DROP INDEX "' || rec.index_name || '"');
  END LOOP;
  -- drop special case indexes
  -- nx_execute('DROP INDEX "ANCESTORS_HIERARCHY_ID_IDX"');
  nx_execute('DROP INDEX "HIERARCHY_PARENTID_IDX"');
  nx_execute('DROP INDEX "HIER_B0ED9092_IDX"');
  nx_execute('DROP INDEX "PROXIES_TARGETID_IDX"');
  nx_execute('DROP INDEX "PROXIES_VERSIONABLEID_IDX"');
  nx_execute('DROP INDEX "VERS_E6513A3A_IDX"');

  -- find fulltext indexes
  INSERT INTO tmp_ftidx
    SELECT idx_name, dbms_metadata.get_ddl('INDEX', idx_name, 'NUXEO')
    FROM ctx_user_indexes WHERE idx_table = 'FULLTEXT';
  -- drop fulltext indexes
  FOR rec in (SELECT index_name FROM tmp_ftidx) LOOP
    dbms_output.put_line('DROP INDEX ' || rec.index_name);
    nx_execute('DROP INDEX "' || rec.index_name || '"');
  END LOOP;

  -- map ids
  INSERT INTO nx_idmap SELECT id, hierarchy_seq.nextval FROM hierarchy;

  -- add new columns
  FOR rec in (SELECT DISTINCT table_name FROM tmp_fk UNION ALL SELECT 'LOCKS' FROM DUAL) LOOP
    dbms_output.put_line('ADD COLUMN _NID ON ' || rec.table_name);
    nx_execute('ALTER TABLE "' || rec.table_name || '" ADD "_NID" NUMBER(10,0)');
  END LOOP;
  -- add special cases
  nx_execute('ALTER TABLE hierarchy ADD "_NPARENTID" NUMBER(10,0)');
  nx_execute('ALTER TABLE hierarchy ADD "_NBASEVERSIONID" NUMBER(10,0)');
  nx_execute('ALTER TABLE proxies ADD "_NTARGETID" NUMBER(10,0)');
  nx_execute('ALTER TABLE proxies ADD "_NVERSIONABLEID" NUMBER(10,0)');
  nx_execute('ALTER TABLE versions ADD "_NVERSIONABLEID" NUMBER(10,0)');
  nx_execute('ALTER TABLE relation ADD "_NSOURCE" NVARCHAR2(2000)');
  nx_execute('ALTER TABLE relation ADD "_NTARGET" NVARCHAR2(2000)');

  -- fill new columns
  FOR rec in (SELECT DISTINCT table_name FROM tmp_fk WHERE table_name <> 'ANCESTORS' UNION ALL SELECT 'LOCKS' FROM DUAL) LOOP
    dbms_output.put_line('MIGRATE ' || rec.table_name);
    nx_execute('MERGE INTO "' || rec.table_name || '" USING nx_idmap ON ("' || rec.table_name || '".id = nx_idmap.id)'
      || ' WHEN MATCHED THEN UPDATE SET "' || rec.table_name || '"."_NID" = nx_idmap.nid');
  END LOOP;
  -- fill special cases
  nx_execute('MERGE INTO hierarchy USING nx_idmap ON (hierarchy.parentid = nx_idmap.id)'
    || ' WHEN MATCHED THEN UPDATE SET hierarchy."_NPARENTID" = nx_idmap.nid');
  nx_execute('MERGE INTO hierarchy USING nx_idmap ON (hierarchy.baseversionid = nx_idmap.id)'
    || ' WHEN MATCHED THEN UPDATE SET hierarchy."_NBASEVERSIONID" = nx_idmap.nid');
  -- nx_execute('MERGE INTO ancestors USING nx_idmap ON (ancestors.hierarchy_id = nx_idmap.id)'
  --  || ' WHEN MATCHED THEN UPDATE SET ancestors."_NID" = nx_idmap.nid');
  nx_execute('MERGE INTO proxies USING nx_idmap ON (proxies.targetid = nx_idmap.id)'
    || ' WHEN MATCHED THEN UPDATE SET proxies."_NTARGETID" = nx_idmap.nid');
  nx_execute('MERGE INTO proxies USING nx_idmap ON (proxies.versionableid = nx_idmap.id)'
    || ' WHEN MATCHED THEN UPDATE SET proxies."_NVERSIONABLEID" = nx_idmap.nid');
  nx_execute('MERGE INTO versions USING nx_idmap ON (versions.versionableid = nx_idmap.id)'
    || ' WHEN MATCHED THEN UPDATE SET versions."_NVERSIONABLEID" = nx_idmap.nid');
  -- relations
  nx_execute('MERGE INTO relation USING nx_idmap ON (relation.source = nx_idmap.id)'
    || ' WHEN MATCHED THEN UPDATE SET relation."_NSOURCE" = nx_idmap.nid');
  nx_execute('MERGE INTO relation USING nx_idmap ON (relation.target = nx_idmap.id)'
    || ' WHEN MATCHED THEN UPDATE SET relation."_NTARGET" = nx_idmap.nid');

  -- drop old id columns
  FOR rec in (SELECT DISTINCT table_name FROM tmp_fk WHERE table_name <> 'ANCESTORS' UNION ALL SELECT 'LOCKS' FROM DUAL) LOOP
    dbms_output.put_line('DROP ID ON ' || rec.table_name);
    nx_execute('ALTER TABLE "' || rec.table_name || '" DROP COLUMN id');
  END LOOP;
  -- special cases
  nx_execute('ALTER TABLE hierarchy DROP COLUMN parentid');
  nx_execute('ALTER TABLE hierarchy DROP COLUMN baseversionid');
  -- nx_execute('ALTER TABLE ancestors DROP COLUMN hierarchy_id');
  nx_execute('ALTER TABLE proxies DROP COLUMN targetid');
  nx_execute('ALTER TABLE proxies DROP COLUMN versionableid');
  nx_execute('ALTER TABLE versions DROP COLUMN versionableid');
  nx_execute('ALTER TABLE relation DROP COLUMN source');
  nx_execute('ALTER TABLE relation DROP COLUMN target');

  -- move new columns into place
  FOR rec in (SELECT DISTINCT table_name FROM tmp_fk WHERE table_name <> 'ANCESTORS' UNION ALL SELECT 'LOCKS' FROM DUAL) LOOP
    dbms_output.put_line('MOVE _NID TO ID ON ' || rec.table_name);
    nx_execute('ALTER TABLE "' || rec.table_name || '" RENAME COLUMN "_NID" TO id');
  END LOOP;
  -- special cases
  nx_execute('ALTER TABLE hierarchy RENAME COLUMN "_NPARENTID" TO parentid');
  nx_execute('ALTER TABLE hierarchy RENAME COLUMN "_NBASEVERSIONID" TO baseversionid');
  -- nx_execute('ALTER TABLE ancestors RENAME COLUMN "_NID" TO hierarchy_id');
  nx_execute('ALTER TABLE proxies RENAME COLUMN "_NTARGETID" TO targetid');
  nx_execute('ALTER TABLE proxies RENAME COLUMN "_NVERSIONABLEID" TO versionableid');
  nx_execute('ALTER TABLE versions RENAME COLUMN "_NVERSIONABLEID" TO versionableid');
  nx_execute('ALTER TABLE relation RENAME COLUMN "_NSOURCE" TO source');
  nx_execute('ALTER TABLE relation RENAME COLUMN "_NTARGET" TO target');

  -- recreate primary keys
  FOR rec in (SELECT table_name, constraint_name FROM tmp_pk) LOOP
    dbms_output.put_line('CREATE PRIMARY KEY ' || rec.constraint_name);
    nx_execute('ALTER TABLE "' || rec.table_name || '" ADD CONSTRAINT "' || rec.constraint_name || '" PRIMARY KEY (id)');
  END LOOP;

  -- recreate foreign keys to HIERARCHY_PK
  FOR rec in (SELECT table_name, constraint_name FROM tmp_fk WHERE table_name <> 'HIERARCHY' AND table_name <> 'PROXIES' AND table_name <> 'ANCESTORS') LOOP
    dbms_output.put_line('CREATE FOREIGN KEY ' || rec.constraint_name);
    nx_execute('ALTER TABLE "' || rec.table_name || '" ADD CONSTRAINT "' || rec.constraint_name || '" FOREIGN KEY (id) REFERENCES hierarchy(id) ON DELETE CASCADE');
  END LOOP;
  -- special cases
  -- nx_execute('ALTER TABLE ancestors ADD CONSTRAINT "ANCESTORS_HIERARCHY_ID_FK" FOREIGN KEY (hierarchy_id) REFERENCES hierarchy(id) ON DELETE CASCADE');
  nx_execute('ALTER TABLE hierarchy ADD CONSTRAINT "HIER_7A50B200_FK" FOREIGN KEY (parentid) REFERENCES hierarchy(id) ON DELETE CASCADE');
  nx_execute('ALTER TABLE proxies ADD CONSTRAINT "PROXIES_ID_HIERARCHY_FK" FOREIGN KEY (id) REFERENCES hierarchy(id) ON DELETE CASCADE');
  nx_execute('ALTER TABLE proxies ADD CONSTRAINT "PROXIES_TARGETID_HIERARCHY_FK" FOREIGN KEY (targetid) REFERENCES hierarchy(id) ON DELETE CASCADE');

  -- recreate nonunique indexes
  FOR rec in (SELECT table_name, index_name FROM tmp_idx WHERE table_name <> 'FULLTEXT') LOOP
    dbms_output.put_line('CREATE INDEX ' || rec.index_name);
    nx_execute('CREATE INDEX "' || rec.index_name || '" ON "' || rec.table_name || '"(id)');
  END LOOP;
  -- special cases
  -- nx_execute('CREATE INDEX "ANCESTORS_HIERARCHY_ID_IDX" ON  "ANCESTORS" ("HIERARCHY_ID")');
  nx_execute('CREATE INDEX  "HIERARCHY_PARENTID_IDX" ON  "HIERARCHY" ("PARENTID")');
  nx_execute('CREATE INDEX  "HIER_B0ED9092_IDX" ON  "HIERARCHY" ("PARENTID", "NAME")');
  nx_execute('CREATE INDEX  "PROXIES_TARGETID_IDX" ON  "PROXIES" ("TARGETID")');
  nx_execute('CREATE INDEX  "PROXIES_VERSIONABLEID_IDX" ON  "PROXIES" ("VERSIONABLEID")');
  nx_execute('CREATE INDEX  "VERS_E6513A3A_IDX" ON  "VERSIONS" ("VERSIONABLEID")');
  nx_execute('CREATE INDEX  "FULLTEXT_JOBID_ID_IDX" ON  "FULLTEXT" ("JOBID", "ID")');

  -- recreate fulltext indexes
  FOR rec in (SELECT create_sql FROM tmp_ftidx) LOOP
    nx_execute(rec.create_sql);
  END LOOP;

END;
