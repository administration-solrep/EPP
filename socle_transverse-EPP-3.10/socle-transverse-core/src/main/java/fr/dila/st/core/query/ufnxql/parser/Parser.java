//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu May 12 13:21:21 CEST 2011
//----------------------------------------------------

package fr.dila.st.core.query.ufnxql.parser;

import java_cup.runtime.*;
import org.nuxeo.ecm.core.query.sql.model.*;
import org.nuxeo.ecm.core.query.*;

/**
 * CUP v0.10k TUM Edition 20050516 generated parser.
 * 
 * @version Thu May 12 13:21:21 CEST 2011
 */
@SuppressWarnings("rawtypes")
public class Parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short	_production_table[][]	= unpackFromStrings(new String[] { "\000\142\000\002\002\004\000\002\003\004\000\002\003"
																	+ "\005\000\002\003\006\000\002\003\005\000\002\003\005"
																	+ "\000\002\003\006\000\002\003\007\000\002\003\005\000"
																	+ "\002\003\007\000\002\014\004\000\002\014\005\000\002"
																	+ "\014\005\000\002\022\005\000\002\022\007\000\002\022"
																	+ "\003\000\002\022\005\000\002\022\003\000\002\015\004"
																	+ "\000\002\015\005\000\002\015\005\000\002\030\003\000"
																	+ "\002\030\003\000\002\023\005\000\002\023\007\000\002"
																	+ "\023\003\000\002\023\005\000\002\016\004\000\002\017"
																	+ "\004\000\002\025\003\000\002\025\005\000\002\026\003"
																	+ "\000\002\026\004\000\002\026\004\000\002\020\004\000"
																	+ "\002\027\003\000\002\027\005\000\002\011\005\000\002"
																	+ "\011\005\000\002\011\005\000\002\011\005\000\002\011"
																	+ "\005\000\002\011\005\000\002\011\005\000\002\011\005"
																	+ "\000\002\011\005\000\002\011\005\000\002\011\005\000"
																	+ "\002\011\005\000\002\011\005\000\002\011\004\000\002"
																	+ "\011\007\000\002\011\010\000\002\011\007\000\002\011"
																	+ "\010\000\002\011\005\000\002\011\005\000\002\011\006"
																	+ "\000\002\011\006\000\002\011\005\000\002\011\005\000"
																	+ "\002\011\006\000\002\011\006\000\002\011\005\000\002"
																	+ "\011\006\000\002\011\005\000\002\005\003\000\002\005"
																	+ "\003\000\002\010\005\000\002\010\005\000\002\010\005"
																	+ "\000\002\010\005\000\002\010\005\000\002\010\005\000"
																	+ "\002\010\005\000\002\010\005\000\002\010\005\000\002"
																	+ "\007\003\000\002\007\003\000\002\004\003\000\002\004"
																	+ "\003\000\002\004\003\000\002\006\003\000\002\006\003"
																	+ "\000\002\006\004\000\002\006\003\000\002\006\004\000"
																	+ "\002\006\004\000\002\006\004\000\002\006\003\000\002"
																	+ "\024\003\000\002\024\005\000\002\012\005\000\002\012"
																	+ "\006\000\002\012\006\000\002\012\010\000\002\013\003"
																	+ "\000\002\013\005" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][]	_action_table	= unpackFromStrings(new String[] { "\000\262\000\004\004\006\001\002\000\004\005\112\001"
																+ "\002\000\006\002\111\023\055\001\002\000\032\024\016"
																+ "\025\013\034\021\036\025\053\010\054\026\062\027\063"
																+ "\023\065\011\066\015\067\007\070\017\001\002\000\052"
																+ "\002\uffae\005\uffae\007\uffae\020\uffae\021\uffae\023\uffae\030"
																+ "\uffae\031\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae"
																+ "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\047"
																+ "\uffae\001\002\000\004\066\110\001\002\000\052\002\uffb3"
																+ "\005\uffb3\007\uffb3\020\uffb3\021\uffb3\023\uffb3\030\uffb3\031"
																+ "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3"
																+ "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3\001"
																+ "\002\000\052\002\uffb1\005\uffb1\007\uffb1\020\uffb1\021\uffb1"
																+ "\023\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036"
																+ "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1"
																+ "\045\uffb1\047\uffb1\001\002\000\026\034\021\036\025\053"
																+ "\010\054\026\062\027\063\023\065\011\066\015\067\007"
																+ "\070\017\001\002\000\052\002\uffb0\005\uffb0\007\uffb0\020"
																+ "\uffb0\021\uffb0\023\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0"
																+ "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043"
																+ "\uffb0\044\uffb0\045\uffb0\047\uffb0\001\002\000\052\002\uffaf"
																+ "\005\uffaf\007\uffaf\020\uffaf\021\uffaf\023\uffaf\030\uffaf\031"
																+ "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf"
																+ "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf\001"
																+ "\002\000\026\034\021\036\025\053\010\054\026\062\027"
																+ "\063\023\065\011\066\015\067\007\070\017\001\002\000"
																+ "\052\002\uffac\005\uffac\007\uffac\020\uffac\021\uffac\023\uffac"
																+ "\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037"
																+ "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac"
																+ "\047\uffac\001\002\000\010\005\ufff2\007\104\045\ufff2\001"
																+ "\002\000\006\067\102\070\103\001\002\000\006\005\ufff7"
																+ "\045\076\001\002\000\054\002\uffb4\005\uffb4\007\uffb4\020"
																+ "\uffb4\021\uffb4\023\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4"
																+ "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043"
																+ "\uffb4\044\uffb4\045\uffb4\046\031\047\uffb4\001\002\000\052"
																+ "\002\uffb2\005\uffb2\007\uffb2\020\uffb2\021\uffb2\023\uffb2\030"
																+ "\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2"
																+ "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047"
																+ "\uffb2\001\002\000\006\005\ufff0\045\ufff0\001\002\000\004"
																+ "\066\030\001\002\000\052\002\uffa8\005\uffa8\007\uffa8\020"
																+ "\uffa8\021\uffa8\023\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8"
																+ "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043"
																+ "\uffa8\044\uffa8\045\uffa8\047\uffa8\001\002\000\052\002\uffa9"
																+ "\005\uffa9\007\uffa9\020\uffa9\021\uffa9\023\uffa9\030\uffa9\031"
																+ "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9"
																+ "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9\001"
																+ "\002\000\032\004\006\034\021\046\033\047\040\053\010"
																+ "\054\026\062\027\063\023\065\011\066\015\067\007\070"
																+ "\017\001\002\000\006\023\055\047\075\001\002\000\026"
																+ "\034\021\046\033\053\010\054\026\062\027\063\023\065"
																+ "\011\066\015\067\007\070\017\001\002\000\006\045\uffa1"
																+ "\047\uffa1\001\002\000\046\002\uffbe\020\uffbe\021\uffbe\023"
																+ "\uffbe\030\uffbe\031\uffbe\033\063\034\062\035\065\036\064"
																+ "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045"
																+ "\uffbe\047\uffbe\001\002\000\006\045\051\047\052\001\002"
																+ "\000\046\002\uffbf\020\uffbf\021\uffbf\023\uffbf\030\uffbf\031"
																+ "\uffbf\033\041\034\042\035\044\036\043\037\uffbf\040\uffbf"
																+ "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\047\uffbf\001"
																+ "\002\000\052\002\uffa5\005\uffa5\007\uffa5\020\uffa5\021\uffa5"
																+ "\023\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036"
																+ "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5"
																+ "\045\uffa5\047\uffa5\001\002\000\024\034\021\053\010\054"
																+ "\026\062\027\063\023\065\011\066\015\067\007\070\017"
																+ "\001\002\000\024\034\021\053\010\054\026\062\027\063"
																+ "\023\065\011\066\015\067\007\070\017\001\002\000\024"
																+ "\034\021\053\010\054\026\062\027\063\023\065\011\066"
																+ "\015\067\007\070\017\001\002\000\024\034\021\053\010"
																+ "\054\026\062\027\063\023\065\011\066\015\067\007\070"
																+ "\017\001\002\000\046\002\uffb6\020\uffb6\021\uffb6\023\uffb6"
																+ "\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037"
																+ "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6"
																+ "\047\uffb6\001\002\000\046\002\uffb7\020\uffb7\021\uffb7\023"
																+ "\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7"
																+ "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045"
																+ "\uffb7\047\uffb7\001\002\000\046\002\uffb8\020\uffb8\021\uffb8"
																+ "\023\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036"
																+ "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8"
																+ "\045\uffb8\047\uffb8\001\002\000\046\002\uffb9\020\uffb9\021"
																+ "\uffb9\023\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9"
																+ "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044"
																+ "\uffb9\045\uffb9\047\uffb9\001\002\000\030\004\006\034\021"
																+ "\046\033\053\010\054\026\062\027\063\023\065\011\066"
																+ "\015\067\007\070\017\001\002\000\052\002\uffa4\005\uffa4"
																+ "\007\uffa4\020\uffa4\021\uffa4\023\uffa4\030\uffa4\031\uffa4\033"
																+ "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4"
																+ "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4\001\002\000"
																+ "\006\023\055\047\056\001\002\000\006\045\uffa0\047\uffa0"
																+ "\001\002\000\004\067\057\001\002\000\052\002\uffa2\005"
																+ "\uffa2\007\uffa2\020\uffa2\021\uffa2\023\uffa2\030\uffa2\031\uffa2"
																+ "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041"
																+ "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\047\uffa2\001\002"
																+ "\000\012\002\ufff9\023\ufff9\047\ufff9\055\060\001\002\000"
																+ "\004\067\061\001\002\000\010\002\ufff8\023\ufff8\047\ufff8"
																+ "\001\002\000\024\034\021\053\010\054\026\062\027\063"
																+ "\023\065\011\066\015\067\007\070\017\001\002\000\024"
																+ "\034\021\053\010\054\026\062\027\063\023\065\011\066"
																+ "\015\067\007\070\017\001\002\000\024\034\021\053\010"
																+ "\054\026\062\027\063\023\065\011\066\015\067\007\070"
																+ "\017\001\002\000\024\034\021\053\010\054\026\062\027"
																+ "\063\023\065\011\066\015\067\007\070\017\001\002\000"
																+ "\046\002\uffba\020\uffba\021\uffba\023\uffba\030\uffba\031\uffba"
																+ "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041"
																+ "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047\uffba\001\002"
																+ "\000\046\002\uffbb\020\uffbb\021\uffbb\023\uffbb\030\uffbb\031"
																+ "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb"
																+ "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\001"
																+ "\002\000\046\002\uffbd\020\uffbd\021\uffbd\023\uffbd\030\uffbd"
																+ "\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040"
																+ "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\047\uffbd"
																+ "\001\002\000\046\002\uffbc\020\uffbc\021\uffbc\023\uffbc\030"
																+ "\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc"
																+ "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047"
																+ "\uffbc\001\002\000\012\033\041\034\042\035\044\036\043"
																+ "\001\002\000\014\033\063\034\062\035\065\036\064\047"
																+ "\074\001\002\000\046\002\uffb5\020\uffb5\021\uffb5\023\uffb5"
																+ "\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037"
																+ "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5"
																+ "\047\uffb5\001\002\000\052\002\uffa3\005\uffa3\007\uffa3\020"
																+ "\uffa3\021\uffa3\023\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3"
																+ "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043"
																+ "\uffa3\044\uffa3\045\uffa3\047\uffa3\001\002\000\024\034\021"
																+ "\053\010\054\026\062\027\063\023\065\011\066\015\067"
																+ "\007\070\017\001\002\000\010\005\ufff4\007\100\045\ufff4"
																+ "\001\002\000\004\063\101\001\002\000\006\005\ufff3\045"
																+ "\ufff3\001\002\000\052\002\uffad\005\uffad\007\uffad\020\uffad"
																+ "\021\uffad\023\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035"
																+ "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad"
																+ "\044\uffad\045\uffad\047\uffad\001\002\000\052\002\uffab\005"
																+ "\uffab\007\uffab\020\uffab\021\uffab\023\uffab\030\uffab\031\uffab"
																+ "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041"
																+ "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\047\uffab\001\002"
																+ "\000\004\063\105\001\002\000\006\005\ufff1\045\ufff1\001"
																+ "\002\000\006\005\ufff6\045\076\001\002\000\006\005\ufff5"
																+ "\045\076\001\002\000\052\002\uffaa\005\uffaa\007\uffaa\020"
																+ "\uffaa\021\uffaa\023\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa"
																+ "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043"
																+ "\uffaa\044\uffaa\045\uffaa\047\uffaa\001\002\000\004\002\001"
																+ "\001\002\000\012\050\253\052\254\063\251\064\247\001"
																+ "\002\000\016\002\000\006\120\020\117\021\121\023\000"
																+ "\047\000\001\002\000\010\002\ufffc\023\ufffc\047\ufffc\001"
																+ "\002\000\014\002\uffff\020\117\021\121\023\uffff\047\uffff"
																+ "\001\002\000\010\002\ufffd\023\ufffd\047\ufffd\001\002\000"
																+ "\004\063\236\001\002\000\030\032\127\034\021\046\131"
																+ "\053\010\054\026\062\027\063\130\065\011\066\015\067"
																+ "\007\070\017\001\002\000\004\063\122\001\002\000\014"
																+ "\002\uffde\020\uffde\023\uffde\045\uffde\047\uffde\001\002\000"
																+ "\014\002\uffdf\020\uffdf\023\uffdf\045\124\047\uffdf\001\002"
																+ "\000\004\063\125\001\002\000\014\002\uffdd\020\uffdd\023"
																+ "\uffdd\045\uffdd\047\uffdd\001\002\000\024\002\uffe6\020\uffe6"
																+ "\021\uffe6\023\uffe6\030\157\031\161\037\155\040\160\047"
																+ "\uffe6\001\002\000\030\032\127\034\021\046\131\053\010"
																+ "\054\026\062\027\063\130\065\011\066\015\067\007\070"
																+ "\017\001\002\000\052\010\167\011\166\012\173\013\170"
																+ "\030\uffb4\031\uffb4\032\171\033\uffb4\034\uffb4\035\uffb4\036"
																+ "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4"
																+ "\046\031\051\174\056\172\001\002\000\030\032\127\034"
																+ "\021\046\131\053\010\054\026\062\027\063\130\065\011"
																+ "\066\015\067\007\070\017\001\002\000\022\030\137\031"
																+ "\142\037\134\040\140\041\133\042\136\043\141\044\135"
																+ "\001\002\000\026\034\021\046\033\053\010\054\026\062"
																+ "\027\063\023\065\011\066\015\067\007\070\017\001\002"
																+ "\000\026\034\021\046\033\053\010\054\026\062\027\063"
																+ "\023\065\011\066\015\067\007\070\017\001\002\000\026"
																+ "\034\021\046\033\053\010\054\026\062\027\063\023\065"
																+ "\011\066\015\067\007\070\017\001\002\000\026\034\021"
																+ "\046\033\053\010\054\026\062\027\063\023\065\011\066"
																+ "\015\067\007\070\017\001\002\000\026\034\021\046\033"
																+ "\053\010\054\026\062\027\063\023\065\011\066\015\067"
																+ "\007\070\017\001\002\000\026\034\021\046\033\053\010"
																+ "\054\026\062\027\063\023\065\011\066\015\067\007\070"
																+ "\017\001\002\000\026\034\021\046\033\053\010\054\026"
																+ "\062\027\063\023\065\011\066\015\067\007\070\017\001"
																+ "\002\000\026\034\021\046\033\053\010\054\026\062\027"
																+ "\063\023\065\011\066\015\067\007\070\017\001\002\000"
																+ "\024\002\uffd7\020\uffd7\021\uffd7\023\uffd7\030\uffd7\031\uffd7"
																+ "\037\uffd7\040\uffd7\047\uffd7\001\002\000\024\002\uffd2\020"
																+ "\uffd2\021\uffd2\023\uffd2\030\uffd2\031\uffd2\037\uffd2\040\uffd2"
																+ "\047\uffd2\001\002\000\024\002\uffd5\020\uffd5\021\uffd5\023"
																+ "\uffd5\030\uffd5\031\uffd5\037\uffd5\040\uffd5\047\uffd5\001\002"
																+ "\000\024\002\uffd8\020\uffd8\021\uffd8\023\uffd8\030\uffd8\031"
																+ "\uffd8\037\uffd8\040\uffd8\047\uffd8\001\002\000\024\002\uffd3"
																+ "\020\uffd3\021\uffd3\023\uffd3\030\uffd3\031\uffd3\037\uffd3\040"
																+ "\uffd3\047\uffd3\001\002\000\024\002\uffd1\020\uffd1\021\uffd1"
																+ "\023\uffd1\030\uffd1\031\uffd1\037\uffd1\040\uffd1\047\uffd1\001"
																+ "\002\000\024\002\uffd6\020\uffd6\021\uffd6\023\uffd6\030\uffd6"
																+ "\031\uffd6\037\uffd6\040\uffd6\047\uffd6\001\002\000\024\002"
																+ "\uffd4\020\uffd4\021\uffd4\023\uffd4\030\uffd4\031\uffd4\037\uffd4"
																+ "\040\uffd4\047\uffd4\001\002\000\014\030\157\031\161\037"
																+ "\155\040\160\047\156\001\002\000\034\030\uffbe\031\uffbe"
																+ "\033\063\034\062\035\065\036\064\037\uffbe\040\uffbe\041"
																+ "\uffbe\042\uffbe\043\uffbe\044\uffbe\047\074\001\002\000\030"
																+ "\032\127\034\021\046\131\053\010\054\026\062\027\063"
																+ "\130\065\011\066\015\067\007\070\017\001\002\000\024"
																+ "\002\uffd0\020\uffd0\021\uffd0\023\uffd0\030\uffd0\031\uffd0\037"
																+ "\uffd0\040\uffd0\047\uffd0\001\002\000\030\032\127\034\021"
																+ "\046\131\053\010\054\026\062\027\063\130\065\011\066"
																+ "\015\067\007\070\017\001\002\000\030\032\127\034\021"
																+ "\046\131\053\010\054\026\062\027\063\130\065\011\066"
																+ "\015\067\007\070\017\001\002\000\030\032\127\034\021"
																+ "\046\131\053\010\054\026\062\027\063\130\065\011\066"
																+ "\015\067\007\070\017\001\002\000\024\002\uffdb\020\uffdb"
																+ "\021\uffdb\023\uffdb\030\157\031\uffdb\037\155\040\160\047"
																+ "\uffdb\001\002\000\020\002\uffd9\020\uffd9\021\uffd9\023\uffd9"
																+ "\030\uffd9\031\uffd9\047\uffd9\001\002\000\024\002\uffdc\020"
																+ "\uffdc\021\uffdc\023\uffdc\030\uffdc\031\uffdc\037\155\040\160"
																+ "\047\uffdc\001\002\000\020\002\uffda\020\uffda\021\uffda\023"
																+ "\uffda\030\uffda\031\uffda\047\uffda\001\002\000\006\062\233"
																+ "\066\232\001\002\000\004\046\227\001\002\000\020\034"
																+ "\021\053\010\054\026\062\027\066\015\067\007\070\017"
																+ "\001\002\000\012\010\204\011\203\012\206\013\205\001"
																+ "\002\000\006\032\200\057\201\001\002\000\006\062\177"
																+ "\066\176\001\002\000\004\066\175\001\002\000\024\002"
																+ "\uffc0\020\uffc0\021\uffc0\023\uffc0\030\uffc0\031\uffc0\037\uffc0"
																+ "\040\uffc0\047\uffc0\001\002\000\024\002\uffc9\020\uffc9\021"
																+ "\uffc9\023\uffc9\030\uffc9\031\uffc9\037\uffc9\040\uffc9\047\uffc9"
																+ "\001\002\000\024\002\uffc5\020\uffc5\021\uffc5\023\uffc5\030"
																+ "\uffc5\031\uffc5\037\uffc5\040\uffc5\047\uffc5\001\002\000\004"
																+ "\057\202\001\002\000\024\002\uffc2\020\uffc2\021\uffc2\023"
																+ "\uffc2\030\uffc2\031\uffc2\037\uffc2\040\uffc2\047\uffc2\001\002"
																+ "\000\024\002\uffc1\020\uffc1\021\uffc1\023\uffc1\030\uffc1\031"
																+ "\uffc1\037\uffc1\040\uffc1\047\uffc1\001\002\000\006\062\223"
																+ "\066\222\001\002\000\004\046\214\001\002\000\020\034"
																+ "\021\053\010\054\026\062\027\066\015\067\007\070\017"
																+ "\001\002\000\006\062\210\066\207\001\002\000\024\002"
																+ "\uffc7\020\uffc7\021\uffc7\023\uffc7\030\uffc7\031\uffc7\037\uffc7"
																+ "\040\uffc7\047\uffc7\001\002\000\024\002\uffc3\020\uffc3\021"
																+ "\uffc3\023\uffc3\030\uffc3\031\uffc3\037\uffc3\040\uffc3\047\uffc3"
																+ "\001\002\000\004\030\212\001\002\000\020\034\021\053"
																+ "\010\054\026\062\027\066\015\067\007\070\017\001\002"
																+ "\000\024\002\uffcb\020\uffcb\021\uffcb\023\uffcb\030\uffcb\031"
																+ "\uffcb\037\uffcb\040\uffcb\047\uffcb\001\002\000\020\034\021"
																+ "\053\010\054\026\062\027\066\015\067\007\070\017\001"
																+ "\002\000\006\045\217\047\220\001\002\000\006\045\uffa7"
																+ "\047\uffa7\001\002\000\020\034\021\053\010\054\026\062"
																+ "\027\066\015\067\007\070\017\001\002\000\024\002\uffcd"
																+ "\020\uffcd\021\uffcd\023\uffcd\030\uffcd\031\uffcd\037\uffcd\040"
																+ "\uffcd\047\uffcd\001\002\000\006\045\uffa6\047\uffa6\001\002"
																+ "\000\024\002\uffc8\020\uffc8\021\uffc8\023\uffc8\030\uffc8\031"
																+ "\uffc8\037\uffc8\040\uffc8\047\uffc8\001\002\000\024\002\uffc4"
																+ "\020\uffc4\021\uffc4\023\uffc4\030\uffc4\031\uffc4\037\uffc4\040"
																+ "\uffc4\047\uffc4\001\002\000\004\030\225\001\002\000\020"
																+ "\034\021\053\010\054\026\062\027\066\015\067\007\070"
																+ "\017\001\002\000\024\002\uffcc\020\uffcc\021\uffcc\023\uffcc"
																+ "\030\uffcc\031\uffcc\037\uffcc\040\uffcc\047\uffcc\001\002\000"
																+ "\020\034\021\053\010\054\026\062\027\066\015\067\007"
																+ "\070\017\001\002\000\006\045\217\047\231\001\002\000"
																+ "\024\002\uffce\020\uffce\021\uffce\023\uffce\030\uffce\031\uffce"
																+ "\037\uffce\040\uffce\047\uffce\001\002\000\024\002\uffca\020"
																+ "\uffca\021\uffca\023\uffca\030\uffca\031\uffca\037\uffca\040\uffca"
																+ "\047\uffca\001\002\000\024\002\uffc6\020\uffc6\021\uffc6\023"
																+ "\uffc6\030\uffc6\031\uffc6\037\uffc6\040\uffc6\047\uffc6\001\002"
																+ "\000\024\002\uffcf\020\uffcf\021\uffcf\023\uffcf\030\uffcf\031"
																+ "\uffcf\037\155\040\160\047\uffcf\001\002\000\012\002\uffe4"
																+ "\023\uffe4\045\uffe4\047\uffe4\001\002\000\016\002\uffe2\023"
																+ "\uffe2\026\243\027\242\045\uffe2\047\uffe2\001\002\000\012"
																+ "\002\uffe5\023\uffe5\045\240\047\uffe5\001\002\000\004\063"
																+ "\236\001\002\000\012\002\uffe3\023\uffe3\045\uffe3\047\uffe3"
																+ "\001\002\000\012\002\uffe0\023\uffe0\045\uffe0\047\uffe0\001"
																+ "\002\000\012\002\uffe1\023\uffe1\045\uffe1\047\uffe1\001\002"
																+ "\000\012\002\ufffb\020\117\023\ufffb\047\ufffb\001\002\000"
																+ "\010\002\ufffe\023\ufffe\047\ufffe\001\002\000\010\002\ufffa"
																+ "\023\ufffa\047\ufffa\001\002\000\022\002\uffeb\006\uffeb\007"
																+ "\uffeb\020\uffeb\021\uffeb\023\uffeb\045\uffeb\047\uffeb\001\002"
																+ "\000\020\002\uffef\006\uffef\020\uffef\021\uffef\023\uffef\045"
																+ "\256\047\uffef\001\002\000\022\002\uffec\006\uffec\007\uffec"
																+ "\020\uffec\021\uffec\023\uffec\045\uffec\047\uffec\001\002\000"
																+ "\022\002\uffe8\006\uffe8\007\263\020\uffe8\021\uffe8\023\uffe8"
																+ "\045\uffe8\047\uffe8\001\002\000\006\063\251\064\247\001"
																+ "\002\000\006\063\251\064\247\001\002\000\020\002\uffee"
																+ "\006\uffee\020\uffee\021\uffee\023\uffee\045\256\047\uffee\001"
																+ "\002\000\006\063\251\064\247\001\002\000\022\002\uffea"
																+ "\006\uffea\007\260\020\uffea\021\uffea\023\uffea\045\uffea\047"
																+ "\uffea\001\002\000\004\063\261\001\002\000\020\002\uffe9"
																+ "\006\uffe9\020\uffe9\021\uffe9\023\uffe9\045\uffe9\047\uffe9\001"
																+ "\002\000\020\002\uffed\006\uffed\020\uffed\021\uffed\023\uffed"
																+ "\045\256\047\uffed\001\002\000\004\063\264\001\002\000"
																+ "\020\002\uffe7\006\uffe7\020\uffe7\021\uffe7\023\uffe7\045\uffe7"
																+ "\047\uffe7\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][]	_reduce_table	= unpackFromStrings(new String[] { "\000\262\000\006\003\004\014\003\001\001\000\004\015"
																+ "\112\001\001\000\002\001\001\000\014\004\017\006\023"
																+ "\007\011\012\013\022\021\001\001\000\002\001\001\000"
																+ "\002\001\001\000\002\001\001\000\002\001\001\000\014"
																+ "\004\017\006\023\007\011\012\013\022\106\001\001\000"
																+ "\002\001\001\000\002\001\001\000\014\004\017\006\023"
																+ "\007\011\012\013\022\105\001\001\000\002\001\001\000"
																+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
																+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\024\003\031"
																+ "\004\036\005\033\006\023\007\011\010\034\012\013\013"
																+ "\035\014\003\001\001\000\002\001\001\000\014\004\071"
																+ "\006\023\007\011\010\072\012\013\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
																+ "\000\002\001\001\000\012\004\047\006\023\007\011\012"
																+ "\013\001\001\000\012\004\046\006\023\007\011\012\013"
																+ "\001\001\000\012\004\045\006\023\007\011\012\013\001"
																+ "\001\000\012\004\044\006\023\007\011\012\013\001\001"
																+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
																+ "\002\001\001\000\022\003\052\004\036\005\053\006\023"
																+ "\007\011\010\034\012\013\014\003\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
																+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
																+ "\002\001\001\000\012\004\070\006\023\007\011\012\013"
																+ "\001\001\000\012\004\067\006\023\007\011\012\013\001"
																+ "\001\000\012\004\066\006\023\007\011\012\013\001\001"
																+ "\000\012\004\065\006\023\007\011\012\013\001\001\000"
																+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
																+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\012\004\076\006\023\007\011"
																+ "\012\013\001\001\000\002\001\001\000\002\001\001\000"
																+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
																+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\006\023\247"
																+ "\030\251\001\001\000\010\016\114\017\115\020\113\001"
																+ "\001\000\002\001\001\000\006\017\244\020\243\001\001"
																+ "\000\002\001\001\000\006\025\236\026\234\001\001\000"
																+ "\020\004\036\005\131\006\023\007\011\010\034\011\125"
																+ "\012\013\001\001\000\004\027\122\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
																+ "\000\002\001\001\000\020\004\036\005\131\006\023\007"
																+ "\011\010\034\011\233\012\013\001\001\000\002\001\001"
																+ "\000\020\004\036\005\131\006\023\007\011\010\153\011"
																+ "\152\012\013\001\001\000\002\001\001\000\016\004\036"
																+ "\005\151\006\023\007\011\010\034\012\013\001\001\000"
																+ "\016\004\036\005\150\006\023\007\011\010\034\012\013"
																+ "\001\001\000\016\004\036\005\147\006\023\007\011\010"
																+ "\034\012\013\001\001\000\016\004\036\005\146\006\023"
																+ "\007\011\010\034\012\013\001\001\000\016\004\036\005"
																+ "\145\006\023\007\011\010\034\012\013\001\001\000\016"
																+ "\004\036\005\144\006\023\007\011\010\034\012\013\001"
																+ "\001\000\016\004\036\005\143\006\023\007\011\010\034"
																+ "\012\013\001\001\000\016\004\036\005\142\006\023\007"
																+ "\011\010\034\012\013\001\001\000\002\001\001\000\002"
																+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
																+ "\000\002\001\001\000\002\001\001\000\020\004\036\005"
																+ "\131\006\023\007\011\010\034\011\164\012\013\001\001"
																+ "\000\002\001\001\000\020\004\036\005\131\006\023\007"
																+ "\011\010\034\011\163\012\013\001\001\000\020\004\036"
																+ "\005\131\006\023\007\011\010\034\011\162\012\013\001"
																+ "\001\000\020\004\036\005\131\006\023\007\011\010\034"
																+ "\011\161\012\013\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
																+ "\000\002\001\001\000\004\006\223\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
																+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
																+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
																+ "\001\001\000\002\001\001\000\004\006\210\001\001\000"
																+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
																+ "\001\001\000\004\006\212\001\001\000\002\001\001\000"
																+ "\006\006\215\024\214\001\001\000\002\001\001\000\002"
																+ "\001\001\000\004\006\220\001\001\000\002\001\001\000"
																+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
																+ "\001\001\000\004\006\225\001\001\000\002\001\001\000"
																+ "\006\006\215\024\227\001\001\000\002\001\001\000\002"
																+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
																+ "\000\004\026\240\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\004\017\245\001\001\000\002"
																+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
																+ "\001\000\002\001\001\000\002\001\001\000\006\023\261"
																+ "\030\251\001\001\000\006\023\254\030\251\001\001\000"
																+ "\002\001\001\000\004\030\256\001\001\000\002\001\001"
																+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
																+ "\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions	action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public void report_error(String message, Object info) {
		// do nothing
	}

	public void report_fatal_error(String message, Object info) throws QueryParseException {
		if (info instanceof Symbol)
			parseFailed(message, (Symbol) info);
		else
			parseFailed(message, null);
	}

	public void syntax_error(Symbol cur_token) {
		// do nothing
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws QueryParseException {
		parseFailed("Syntax error", cur_token);
	}

	public void parseFailed(String message, Symbol token) throws QueryParseException {
		done_parsing();
		if (token != null) {
			StringBuffer buf = new StringBuffer(message);
			message = buf.append(": Invalid token <").append(token.value).append("> at offset ").append(token.right)
					.toString();
		}
		throw new QueryParseException(message);
	}

}

/** Cup generated class to encapsulate user supplied action code. */
@SuppressWarnings("rawtypes")
class CUP$Parser$actions {
	// private final Parser parser;

	/** Constructor */
	CUP$Parser$actions(Parser parser) {
		// this.parser = parser;
	}

	/** Method with the actual generated action code. */
	@SuppressWarnings("unused")
	public final java_cup.runtime.Symbol CUP$Parser$do_action(int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser, java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
			case 97: // function_args ::= function_args COMMA predicate_operand
			{
				OperandList RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				OperandList l = (OperandList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand v = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				l.add(v);
				RESULT = l;
				CUP$Parser$result = new java_cup.runtime.Symbol(9/* function_args */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 96: // function_args ::= predicate_operand
			{
				OperandList RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand v = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new OperandList();
				RESULT.add(v);
				CUP$Parser$result = new java_cup.runtime.Symbol(9/* function_args */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 95: // function ::= IDENTIFIER LPARA function_args COMMA query RPARA
			{
				Function RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
				int argsleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int argsright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				OperandList args = (OperandList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 3)).value;
				int qleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int qright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				SQLQuery q = (SQLQuery) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = new SFunction(name, q, args);
				CUP$Parser$result = new java_cup.runtime.Symbol(8/* function */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 94: // function ::= IDENTIFIER LPARA query RPARA
			{
				Function RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				int qleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int qright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				SQLQuery q = (SQLQuery) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = new SFunction(name, q);
				CUP$Parser$result = new java_cup.runtime.Symbol(8/* function */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 93: // function ::= IDENTIFIER LPARA function_args RPARA
			{
				Function RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				int argsleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int argsright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				OperandList args = (OperandList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				RESULT = new Function(name, args);
				CUP$Parser$result = new java_cup.runtime.Symbol(8/* function */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 92: // function ::= IDENTIFIER LPARA RPARA
			{
				Function RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				RESULT = new Function(name);
				CUP$Parser$result = new java_cup.runtime.Symbol(8/* function */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 91: // literal_list ::= literal_list COMMA literal
			{
				LiteralList RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				LiteralList l = (LiteralList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Literal v = (Literal) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				l.add(v);
				RESULT = l;
				CUP$Parser$result = new java_cup.runtime.Symbol(18/* literal_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 90: // literal_list ::= literal
			{
				LiteralList RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Literal v = (Literal) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new LiteralList();
				RESULT.add(v);
				CUP$Parser$result = new java_cup.runtime.Symbol(18/* literal_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 89: // literal ::= PARAM
			{
				Literal RESULT = null;
				RESULT = new SParamLiteral();
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 88: // literal ::= TIMESTAMP STRING
			{
				Literal RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new DateLiteral(v, false);
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 87: // literal ::= DATE STRING
			{
				Literal RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new DateLiteral(v, true);
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 86: // literal ::= SUB DOUBLE
			{
				Literal RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new DoubleLiteral('-' + v);
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 85: // literal ::= DOUBLE
			{
				Literal RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new DoubleLiteral(v);
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 84: // literal ::= SUB INTEGER
			{
				Literal RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new IntegerLiteral('-' + v);
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 83: // literal ::= INTEGER
			{
				Literal RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new IntegerLiteral(v);
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 82: // literal ::= STRING
			{
				Literal RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new StringLiteral(v);
				CUP$Parser$result = new java_cup.runtime.Symbol(4/* literal */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 81: // operand ::= function
			{
				Operand RESULT = null;
				int fleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int fright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Function f = (Function) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = f;
				CUP$Parser$result = new java_cup.runtime.Symbol(2/* operand */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 80: // operand ::= reference
			{
				Operand RESULT = null;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Reference r = (Reference) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = r;
				CUP$Parser$result = new java_cup.runtime.Symbol(2/* operand */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 79: // operand ::= literal
			{
				Operand RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Literal v = (Literal) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = v;
				CUP$Parser$result = new java_cup.runtime.Symbol(2/* operand */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 78: // reference ::= PATH_IDENTIFIER
			{
				Reference RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new PathReference(v);
				CUP$Parser$result = new java_cup.runtime.Symbol(5/* reference */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 77: // reference ::= IDENTIFIER
			{
				Reference RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Reference(v);
				CUP$Parser$result = new java_cup.runtime.Symbol(5/* reference */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 76: // expression ::= LPARA expression RPARA
			{
				Expression RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = e;
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 75: // expression ::= operand DIV operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.DIV, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 74: // expression ::= operand MUL operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.MUL, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 73: // expression ::= operand SUB operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.SUB, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 72: // expression ::= operand SUM operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.SUM, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 71: // expression ::= expression DIV operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Expression l = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.DIV, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 70: // expression ::= expression MUL operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Expression l = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.MUL, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 69: // expression ::= expression SUB operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Expression l = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.SUB, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 68: // expression ::= expression SUM operand
			{
				Expression RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Expression l = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Expression(l, Operator.SUM, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(6/* expression */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 67: // predicate_operand ::= expression
			{
				Operand RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = e;
				CUP$Parser$result = new java_cup.runtime.Symbol(3/* predicate_operand */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 66: // predicate_operand ::= operand
			{
				Operand RESULT = null;
				int oleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int oright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand o = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = o;
				CUP$Parser$result = new java_cup.runtime.Symbol(3/* predicate_operand */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 65: // predicate ::= IDENTIFIER STARTSWITH STRING
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(new Reference(name), Operator.STARTSWITH, new StringLiteral(s));
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 64: // predicate ::= IDENTIFIER IS NOT NULL
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				RESULT = new Predicate(new Reference(name), Operator.ISNOTNULL, null);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 63: // predicate ::= IDENTIFIER IS NULL
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				RESULT = new Predicate(new Reference(name), Operator.ISNULL, null);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 62: // predicate ::= IDENTIFIER NOT ILIKE PARAM
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				RESULT = new Predicate(new Reference(name), Operator.NOTILIKE, new SParamLiteral());
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 61: // predicate ::= IDENTIFIER NOT LIKE PARAM
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				RESULT = new Predicate(new Reference(name), Operator.NOTLIKE, new SParamLiteral());
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 60: // predicate ::= IDENTIFIER ILIKE PARAM
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				RESULT = new Predicate(new Reference(name), Operator.ILIKE, new SParamLiteral());
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 59: // predicate ::= IDENTIFIER LIKE PARAM
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				RESULT = new Predicate(new Reference(name), Operator.LIKE, new SParamLiteral());
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 58: // predicate ::= IDENTIFIER NOT ILIKE STRING
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(new Reference(name), Operator.NOTILIKE, new StringLiteral(s));
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 57: // predicate ::= IDENTIFIER NOT LIKE STRING
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(new Reference(name), Operator.NOTLIKE, new StringLiteral(s));
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 56: // predicate ::= IDENTIFIER ILIKE STRING
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(new Reference(name), Operator.ILIKE, new StringLiteral(s));
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 55: // predicate ::= IDENTIFIER LIKE STRING
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(new Reference(name), Operator.LIKE, new StringLiteral(s));
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 54: // predicate ::= IDENTIFIER NOT BETWEEN literal AND literal
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
				int minleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int minright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Literal min = (Literal) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int maxleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int maxright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Literal max = (Literal) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				LiteralList range = new LiteralList();
				range.add(min);
				range.add(max);
				RESULT = new Predicate(new Reference(name), Operator.NOTBETWEEN, range);

				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 53: // predicate ::= IDENTIFIER BETWEEN literal AND literal
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
				int minleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int minright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Literal min = (Literal) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int maxleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int maxright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Literal max = (Literal) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				LiteralList range = new LiteralList();
				range.add(min);
				range.add(max);
				RESULT = new Predicate(new Reference(name), Operator.BETWEEN, range);

				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 52: // predicate ::= IDENTIFIER NOT IN LPARA literal_list RPARA
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				LiteralList list = (LiteralList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				RESULT = new Predicate(new Reference(name), Operator.NOTIN, list);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 51: // predicate ::= IDENTIFIER IN LPARA literal_list RPARA
			{
				Predicate RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				LiteralList list = (LiteralList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				RESULT = new Predicate(new Reference(name), Operator.IN, list);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 50: // predicate ::= NOT predicate
			{
				Predicate RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Predicate p = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(p, Operator.NOT, null);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 49: // predicate ::= LPARA predicate RPARA
			{
				Predicate RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Predicate p = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = p;
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 48: // predicate ::= predicate_operand GTEQ predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.GTEQ, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 47: // predicate ::= predicate_operand LTEQ predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.LTEQ, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 46: // predicate ::= predicate_operand GT predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.GT, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 45: // predicate ::= predicate_operand LT predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.LT, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 44: // predicate ::= predicate_operand NOTEQ predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.NOTEQ, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 43: // predicate ::= predicate_operand EQ predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.EQ, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 42: // predicate ::= predicate_operand OR predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.OR, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 41: // predicate ::= predicate_operand AND predicate_operand
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand l = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand r = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.AND, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 40: // predicate ::= predicate NOTEQ predicate
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Predicate l = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Predicate r = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.NOTEQ, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 39: // predicate ::= predicate EQ predicate
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Predicate l = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Predicate r = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.EQ, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 38: // predicate ::= predicate OR predicate
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Predicate l = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Predicate r = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.OR, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 37: // predicate ::= predicate AND predicate
			{
				Predicate RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Predicate l = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int rleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int rright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Predicate r = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new Predicate(l, Operator.AND, r);
				CUP$Parser$result = new java_cup.runtime.Symbol(7/* predicate */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 36: // group_by_list ::= group_by_list COMMA IDENTIFIER
			{
				SGroupByList RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				SGroupByList l = (SGroupByList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				l.add(new Reference(name));
				RESULT = l;
				CUP$Parser$result = new java_cup.runtime.Symbol(21/* group_by_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 35: // group_by_list ::= IDENTIFIER
			{
				SGroupByList RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SGroupByList(new Reference(name));
				CUP$Parser$result = new java_cup.runtime.Symbol(21/* group_by_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 34: // group_by_clause ::= GROUPBY group_by_list
			{
				SGroupByClause RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				SGroupByList l = (SGroupByList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SGroupByClause(l);
				CUP$Parser$result = new java_cup.runtime.Symbol(14/* group_by_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 33: // order_by_expr ::= IDENTIFIER DESC
			{
				OrderByExpr RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = new OrderByExpr(new Reference(name), true);
				CUP$Parser$result = new java_cup.runtime.Symbol(20/* order_by_expr */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 32: // order_by_expr ::= IDENTIFIER ASC
			{
				OrderByExpr RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = new OrderByExpr(new Reference(name), false);
				CUP$Parser$result = new java_cup.runtime.Symbol(20/* order_by_expr */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 31: // order_by_expr ::= IDENTIFIER
			{
				OrderByExpr RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new OrderByExpr(new Reference(name), false);
				CUP$Parser$result = new java_cup.runtime.Symbol(20/* order_by_expr */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 30: // order_by_list ::= order_by_list COMMA order_by_expr
			{
				OrderByList RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				OrderByList l = (OrderByList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				OrderByExpr e = (OrderByExpr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				l.add(e);
				RESULT = l;
				CUP$Parser$result = new java_cup.runtime.Symbol(19/* order_by_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 29: // order_by_list ::= order_by_expr
			{
				OrderByList RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				OrderByExpr e = (OrderByExpr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new OrderByList(e);
				CUP$Parser$result = new java_cup.runtime.Symbol(19/* order_by_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 28: // order_by_clause ::= ORDERBY order_by_list
			{
				OrderByClause RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				OrderByList l = (OrderByList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new OrderByClause(l);
				CUP$Parser$result = new java_cup.runtime.Symbol(13/* order_by_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 27: // where_clause ::= WHERE predicate
			{
				WhereClause RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Predicate e = (Predicate) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new WhereClause(e);
				CUP$Parser$result = new java_cup.runtime.Symbol(12/* where_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 26: // from_list ::= from_key AS IDENTIFIER
			{
				FromList RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int aliasleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int aliasright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String alias = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				RESULT = new FromList();
				RESULT.add(alias, name);

				CUP$Parser$result = new java_cup.runtime.Symbol(17/* from_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 25: // from_list ::= from_key
			{
				FromList RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				RESULT = new FromList();
				RESULT.add(name, name);

				CUP$Parser$result = new java_cup.runtime.Symbol(17/* from_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 24: // from_list ::= from_list COMMA from_key AS IDENTIFIER
			{
				FromList RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
				FromList list = (FromList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int aliasleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int aliasright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String alias = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				list.add(alias, name);
				RESULT = list;

				CUP$Parser$result = new java_cup.runtime.Symbol(17/* from_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 23: // from_list ::= from_list COMMA from_key
			{
				FromList RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				FromList list = (FromList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				list.add(name, name);
				RESULT = list;

				CUP$Parser$result = new java_cup.runtime.Symbol(17/* from_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 22: // from_key ::= FROM_IDENTIFIER
			{
				String RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = id;
				CUP$Parser$result = new java_cup.runtime.Symbol(22/* from_key */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 21: // from_key ::= IDENTIFIER
			{
				String RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = id;
				CUP$Parser$result = new java_cup.runtime.Symbol(22/* from_key */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 20: // from_clause ::= FROM LOCATION from_list
			{
				FromClause RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				FromList list = (FromList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new FromClause(FromClause.LOCATION, list);
				CUP$Parser$result = new java_cup.runtime.Symbol(11/* from_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 19: // from_clause ::= FROM TYPE from_list
			{
				FromClause RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				FromList list = (FromList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new FromClause(FromClause.DOCTYPE, list);
				CUP$Parser$result = new java_cup.runtime.Symbol(11/* from_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 18: // from_clause ::= FROM from_list
			{
				FromClause RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				FromList list = (FromList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new FromClause(list);
				CUP$Parser$result = new java_cup.runtime.Symbol(11/* from_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 17: // select_list ::= MUL
			{
				SelectList RESULT = null;
				RESULT = new SelectList();
				CUP$Parser$result = new java_cup.runtime.Symbol(16/* select_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 16: // select_list ::= operand AS IDENTIFIER
			{
				SelectList RESULT = null;
				int oleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int oright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand o = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int aliasleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int aliasright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String alias = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				RESULT = new SelectList();
				RESULT.add(alias, o);

				CUP$Parser$result = new java_cup.runtime.Symbol(16/* select_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 15: // select_list ::= operand
			{
				SelectList RESULT = null;
				int oleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int oright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand o = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				RESULT = new SelectList();
				RESULT.add(o.toString(), o);

				CUP$Parser$result = new java_cup.runtime.Symbol(16/* select_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 14: // select_list ::= select_list COMMA operand AS IDENTIFIER
			{
				SelectList RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
				SelectList list = (SelectList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 4)).value;
				int oleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int oright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Operand o = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int aliasleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int aliasright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String alias = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				list.add(alias, o);
				RESULT = list;

				CUP$Parser$result = new java_cup.runtime.Symbol(16/* select_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 13: // select_list ::= select_list COMMA operand
			{
				SelectList RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				SelectList list = (SelectList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int oleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int oright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				Operand o = (Operand) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;

				list.add(o.toString(), o);
				RESULT = list;

				CUP$Parser$result = new java_cup.runtime.Symbol(16/* select_list */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 12: // select_clause ::= SELECT ALL select_list
			{
				SelectClause RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				SelectList list = (SelectList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SelectClause(list, false);
				CUP$Parser$result = new java_cup.runtime.Symbol(10/* select_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 11: // select_clause ::= SELECT DISTINCT select_list
			{
				SelectClause RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				SelectList list = (SelectList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SelectClause(list, true);
				CUP$Parser$result = new java_cup.runtime.Symbol(10/* select_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 10: // select_clause ::= SELECT select_list
			{
				SelectClause RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				SelectList list = (SelectList) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SelectClause(list);
				CUP$Parser$result = new java_cup.runtime.Symbol(10/* select_clause */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 9: // query ::= query LIMIT INTEGER OFFSET INTEGER
			{
				SQLQuery RESULT = null;
				int qleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
				int qright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
				SQLQuery q = (SQLQuery) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int oleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int oright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String o = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				q.limit = Long.parseLong(l);
				q.offset = Long.parseLong(o);
				RESULT = q;
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 8: // query ::= query LIMIT INTEGER
			{
				SQLQuery RESULT = null;
				int qleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int qright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				SQLQuery q = (SQLQuery) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).value;
				q.limit = Long.parseLong(l);
				RESULT = q;
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 7: // query ::= select_clause from_clause where_clause group_by_clause order_by_clause
			{
				SQLQuery RESULT = null;
				int selectleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
				int selectright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
				SelectClause select = (SelectClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 4)).value;
				int fromleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int fromright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				FromClause from = (FromClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 3)).value;
				int whereleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int whereright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				WhereClause where = (WhereClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int groupleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int groupright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				SGroupByClause group = (SGroupByClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int orderleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int orderright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				OrderByClause order = (OrderByClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SQLQuery(select, from, where, group, null, order);
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 6: // query ::= select_clause from_clause where_clause group_by_clause
			{
				SQLQuery RESULT = null;
				int selectleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int selectright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				SelectClause select = (SelectClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 3)).value;
				int fromleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int fromright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				FromClause from = (FromClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int whereleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int whereright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				WhereClause where = (WhereClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int groupleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int groupright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				SGroupByClause group = (SGroupByClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SQLQuery(select, from, where, group, null, null);
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 5: // query ::= select_clause from_clause group_by_clause
			{
				SQLQuery RESULT = null;
				int selectleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int selectright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				SelectClause select = (SelectClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int fromleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int fromright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				FromClause from = (FromClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int groupleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int groupright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				SGroupByClause group = (SGroupByClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SQLQuery(select, from, null, group, null, null);
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 4: // query ::= select_clause from_clause order_by_clause
			{
				SQLQuery RESULT = null;
				int selectleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int selectright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				SelectClause select = (SelectClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int fromleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int fromright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				FromClause from = (FromClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int orderleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int orderright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				OrderByClause order = (OrderByClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SQLQuery(select, from, null, order);
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 3: // query ::= select_clause from_clause where_clause order_by_clause
			{
				SQLQuery RESULT = null;
				int selectleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int selectright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				SelectClause select = (SelectClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 3)).value;
				int fromleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int fromright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				FromClause from = (FromClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int whereleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int whereright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				WhereClause where = (WhereClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int orderleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int orderright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				OrderByClause order = (OrderByClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SQLQuery(select, from, where, order);
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 2: // query ::= select_clause from_clause where_clause
			{
				SQLQuery RESULT = null;
				int selectleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int selectright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				SelectClause select = (SelectClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int fromleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int fromright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				FromClause from = (FromClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int whereleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int whereright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				WhereClause where = (WhereClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SQLQuery(select, from, where);
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // query ::= select_clause from_clause
			{
				SQLQuery RESULT = null;
				int selectleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int selectright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				SelectClause select = (SelectClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int fromleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).left;
				int fromright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right;
				FromClause from = (FromClause) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 0)).value;
				RESULT = new SQLQuery(select, from);
				CUP$Parser$result = new java_cup.runtime.Symbol(1/* query */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				return CUP$Parser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // $START ::= query EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				SQLQuery start_val = (SQLQuery) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				RESULT = start_val;
				CUP$Parser$result = new java_cup.runtime.Symbol(0/* $START */,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 0)).right, RESULT);
			}
				/* ACCEPT */
				CUP$Parser$parser.done_parsing();
				return CUP$Parser$result;

				/* . . . . . . */
			default:
				throw new Exception("Invalid action number found in internal parse table");

		}
	}
}
