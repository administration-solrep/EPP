/* The following code was generated by JFlex 1.4.3 on 12/05/11 13:21 */

/*
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Nuxeo - initial API and implementation
 *
 *
 * $Id$
 */
package fr.dila.st.core.query.ufnxql.parser;

import java_cup.runtime.*;
import org.nuxeo.ecm.core.query.*;

/**
 * Lexer for NXQL
 */

public class Scanner implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int		YYEOF				= -1;

	/** initial size of the lookahead buffer */
	private static final int	ZZ_BUFFERSIZE		= 16384;

	/** lexical states */
	public static final int		STRING				= 4;
	public static final int		YYINITIAL			= 0;
	public static final int		SQ_STRING			= 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in the DFA for the
	 * lexical state l at the beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int	ZZ_LEXSTATE[]		= { 0, 0, 1, 1, 2, 2 };

	/**
	 * Translates characters to character classes
	 */
	private static final String	ZZ_CMAP_PACKED		= "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\61\1\74\1\103"
															+ "\1\0\1\4\2\0\1\104\1\77\1\100\1\72\1\14\1\101\1\15"
															+ "\1\7\1\10\1\11\11\12\1\5\1\0\1\75\1\73\1\76\1\102"
															+ "\1\0\1\43\1\57\1\21\1\47\1\17\1\27\1\66\1\40\1\51"
															+ "\1\6\1\55\1\20\1\32\1\45\1\31\1\64\1\6\1\30\1\16"
															+ "\1\22\1\53\1\70\1\37\1\6\1\62\1\6\1\0\1\105\2\0"
															+ "\1\6\1\0\1\44\1\60\1\24\1\50\1\13\1\36\1\67\1\41"
															+ "\1\52\1\6\1\56\1\23\1\35\1\46\1\34\1\65\1\6\1\33"
															+ "\1\26\1\25\1\54\1\71\1\42\1\6\1\63\1\6\47\0\4\4"
															+ "\4\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4"
															+ "\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4\11\0\1\4"
															+ "\213\0\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4"
															+ "\1\0\54\4\1\0\46\4\1\0\5\4\4\0\202\4\10\0\105\4"
															+ "\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4"
															+ "\7\0\47\4\110\0\33\4\5\0\3\4\56\0\32\4\5\0\13\4"
															+ "\43\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4"
															+ "\12\0\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\3\4"
															+ "\60\0\46\4\13\0\1\4\u0152\0\66\4\3\0\1\4\22\0\1\4"
															+ "\7\0\12\4\43\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"
															+ "\1\0\1\4\3\0\4\4\3\0\1\4\36\0\2\4\1\0\3\4"
															+ "\16\0\4\4\21\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4"
															+ "\1\0\2\4\1\0\2\4\1\0\2\4\37\0\4\4\1\0\1\4"
															+ "\23\0\3\4\20\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4"
															+ "\1\0\2\4\1\0\5\4\3\0\1\4\22\0\1\4\17\0\2\4"
															+ "\17\0\1\4\23\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"
															+ "\1\0\2\4\1\0\5\4\3\0\1\4\36\0\2\4\1\0\3\4"
															+ "\17\0\1\4\21\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4"
															+ "\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4"
															+ "\3\0\10\4\1\0\3\4\77\0\1\4\13\0\10\4\1\0\3\4"
															+ "\1\0\27\4\1\0\12\4\1\0\5\4\46\0\2\4\43\0\10\4"
															+ "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4"
															+ "\40\0\1\4\1\0\2\4\43\0\10\4\1\0\3\4\1\0\27\4"
															+ "\1\0\20\4\46\0\2\4\43\0\22\4\3\0\30\4\1\0\11\4"
															+ "\1\0\1\4\2\0\7\4\72\0\60\4\1\0\2\4\13\0\10\4"
															+ "\72\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4"
															+ "\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4"
															+ "\2\0\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4"
															+ "\1\0\1\4\25\0\2\4\42\0\1\4\77\0\10\4\1\0\42\4"
															+ "\35\0\4\4\164\0\42\4\1\0\5\4\1\0\2\4\45\0\6\4"
															+ "\112\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0\122\4"
															+ "\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0\7\4"
															+ "\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0\4\4"
															+ "\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4"
															+ "\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0\37\4"
															+ "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0\23\4"
															+ "\105\0\125\4\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4"
															+ "\3\0\3\4\17\0\15\4\1\0\4\4\16\0\22\4\16\0\22\4"
															+ "\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4\3\0\2\4"
															+ "\103\0\130\4\10\0\51\4\127\0\35\4\63\0\36\4\2\0\5\4"
															+ "\u038b\0\154\4\224\0\234\4\4\0\132\4\6\0\26\4\2\0\6\4"
															+ "\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4"
															+ "\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4"
															+ "\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4"
															+ "\5\0\3\4\1\0\7\4\102\0\2\4\23\0\1\4\34\0\1\4"
															+ "\15\0\1\4\40\0\22\4\120\0\1\4\4\0\1\4\2\0\12\4"
															+ "\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"
															+ "\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0\5\4"
															+ "\26\0\44\4\u0e81\0\3\4\31\0\11\4\7\0\5\4\2\0\5\4"
															+ "\4\0\126\4\6\0\3\4\1\0\137\4\5\0\50\4\4\0\136\4"
															+ "\21\0\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4"
															+ "\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4"
															+ "\5\0\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4"
															+ "\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4"
															+ "\2\0\66\4\50\0\15\4\66\0\2\4\30\0\3\4\31\0\1\4"
															+ "\6\0\5\4\1\0\207\4\7\0\1\4\34\0\32\4\4\0\1\4"
															+ "\1\0\32\4\12\0\132\4\3\0\6\4\2\0\6\4\2\0\6\4"
															+ "\2\0\3\4\3\0\2\4\3\0\2\4\31\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[]	ZZ_CMAP				= zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[]	ZZ_ACTION			= zzUnpackAction();

	private static final String	ZZ_ACTION_PACKED_0	= "\3\0\1\1\2\2\1\3\1\1\1\4\2\5\1\6"
															+ "\1\7\32\3\1\10\1\11\1\1\1\12\1\13\1\14"
															+ "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"
															+ "\1\22\1\25\1\24\1\3\1\0\2\26\1\0\21\3"
															+ "\2\27\1\3\1\27\4\3\1\30\2\3\1\30\14\3"
															+ "\1\31\1\3\1\32\6\3\1\33\1\34\1\35\1\36"
															+ "\1\37\1\40\1\41\1\42\1\43\1\44\1\26\1\0"
															+ "\33\3\1\45\1\46\1\47\1\50\17\3\1\43\7\3"
															+ "\1\51\3\3\1\52\2\3\1\53\11\3\1\54\1\55"
															+ "\1\56\17\3\1\57\10\3\1\60\4\3\1\61\5\3"
															+ "\1\62\7\3\1\63\3\0\1\64\4\3\3\0\6\3"
															+ "\2\0\2\3\1\65\2\0\2\3\1\66\2\3\1\67"
															+ "\1\70\1\71\2\3\1\72\1\73";

	private static int[] zzUnpackAction() {
		int[] result = new int[277];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[]	ZZ_ROWMAP			= zzUnpackRowMap();

	private static final String	ZZ_ROWMAP_PACKED_0	= "\0\0\0\106\0\214\0\322\0\u0118\0\322\0\u015e\0\u01a4"
															+ "\0\322\0\u01ea\0\u0230\0\322\0\322\0\u0276\0\u02bc\0\u0302"
															+ "\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532"
															+ "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"
															+ "\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\322"
															+ "\0\322\0\u0992\0\u09d8\0\u0a1e\0\322\0\322\0\322\0\322"
															+ "\0\322\0\322\0\u0a64\0\322\0\u0aaa\0\u0af0\0\322\0\u0b36"
															+ "\0\u0b7c\0\u0bc2\0\u0c08\0\u01ea\0\u0c4e\0\u0c94\0\u0cda\0\u0d20"
															+ "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"
															+ "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"
															+ "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"
															+ "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"
															+ "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u015e\0\u17ca"
															+ "\0\u015e\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\322"
															+ "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\u19b4"
															+ "\0\u19fa\0\u1a40\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"
															+ "\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"
															+ "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"
															+ "\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u015e\0\u015e"
															+ "\0\u015e\0\u015e\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"
															+ "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"
															+ "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"
															+ "\0\u27ec\0\u015e\0\u2832\0\u2878\0\u28be\0\u015e\0\u2904\0\u294a"
															+ "\0\u015e\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"
															+ "\0\u2b7a\0\u2bc0\0\u015e\0\u015e\0\u015e\0\u2c06\0\u2c4c\0\u2c92"
															+ "\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"
															+ "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u015e\0\u3020\0\u3066\0\u30ac"
															+ "\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u015e\0\u3250\0\u3296"
															+ "\0\u32dc\0\u3322\0\u015e\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480"
															+ "\0\u015e\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a"
															+ "\0\u015e\0\u36b0\0\u36f6\0\u373c\0\u015e\0\u3782\0\u37c8\0\u380e"
															+ "\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e"
															+ "\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u015e\0\u3c28"
															+ "\0\u3c6e\0\u3cb4\0\u3cfa\0\u015e\0\u3d40\0\u3d86\0\322\0\u015e"
															+ "\0\322\0\u3dcc\0\u3e12\0\u015e\0\u015e";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[277];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[]	ZZ_TRANS			= zzUnpackTrans();

	private static final String	ZZ_TRANS_PACKED_0	= "\1\4\1\5\2\6\1\7\1\4\1\7\1\10\1\11"
															+ "\1\12\1\13\1\7\1\14\1\15\1\16\1\7\1\17"
															+ "\1\7\1\20\1\21\1\7\1\22\1\23\1\24\1\7"
															+ "\1\25\2\7\1\26\1\7\1\27\1\30\1\31\1\32"
															+ "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"
															+ "\1\43\4\7\1\44\1\45\1\6\4\7\1\46\1\47"
															+ "\2\7\1\50\1\51\1\52\1\53\1\54\1\55\1\56"
															+ "\1\57\1\60\1\61\1\62\1\4\1\63\2\4\101\63"
															+ "\1\64\1\65\1\66\2\4\100\66\1\67\1\66\1\70"
															+ "\110\0\1\6\110\0\2\7\1\71\1\72\3\7\1\0"
															+ "\44\7\1\0\10\7\25\0\2\73\102\0\1\73\1\0"
															+ "\2\74\1\75\3\0\1\75\75\0\1\73\1\0\2\13"
															+ "\1\75\3\0\1\75\73\0\2\7\1\71\1\72\2\7"
															+ "\1\76\1\0\2\7\1\77\2\7\1\100\2\7\1\101"
															+ "\33\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\14\7\1\102\2\7\1\103\14\7\1\104\1\105"
															+ "\6\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\34\7\1\106\1\107\6\7\1\0\1\110\1\111"
															+ "\6\7\21\0\2\7\1\71\1\72\3\7\1\0\17\7"
															+ "\1\103\15\7\1\105\6\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\35\7\1\112\6\7\1\0"
															+ "\1\7\1\111\6\7\21\0\2\7\1\71\1\72\2\7"
															+ "\1\76\1\0\10\7\1\113\33\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\13\7\1\114\2\7"
															+ "\1\115\25\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\12\7\1\116\1\117\2\7\1\120\2\7"
															+ "\1\121\22\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\16\7\1\122\2\7\1\121\22\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\16\7"
															+ "\1\115\25\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\23\7\1\123\1\124\17\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\26\7\1\125"
															+ "\1\126\14\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\27\7\1\126\14\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\24\7\1\124\17\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\1\7\1\127\1\7\1\130\2\7\1\131\2\7\1\132"
															+ "\16\7\1\133\1\134\12\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\6\7\1\131\2\7\1\132"
															+ "\17\7\1\134\12\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\14\7\1\135\2\7\1\136\16\7"
															+ "\1\137\1\140\4\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\17\7\1\136\17\7\1\140\4\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\2\7\1\141"
															+ "\1\0\2\7\1\142\23\7\1\143\1\144\4\7\1\145"
															+ "\1\146\6\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\2\7\1\141\1\0\27\7\1\144\5\7\1\146\6\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\1\7\1\147\1\7\1\150\5\7\1\147\16\7\2\151"
															+ "\12\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\6\7\1\152\2\7\1\147\17\7\1\151\12\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\2\7\1\153"
															+ "\1\0\2\7\1\154\41\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\2\7\1\153\1\0\44\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\13\7\1\155"
															+ "\2\7\1\156\25\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\16\7\1\157\25\7\1\0\10\7"
															+ "\107\0\1\160\105\0\1\161\2\0\1\160\102\0\1\162"
															+ "\12\0\1\63\2\0\101\63\27\0\1\163\5\0\1\164"
															+ "\12\0\1\165\35\0\1\166\1\0\1\66\2\0\100\66"
															+ "\1\0\1\66\26\0\1\163\5\0\1\164\12\0\1\165"
															+ "\34\0\1\167\6\0\1\170\2\7\1\71\1\72\3\7"
															+ "\1\0\44\7\1\0\10\7\20\0\1\171\1\0\1\171"
															+ "\4\0\1\171\2\0\43\171\1\0\10\171\25\0\2\73"
															+ "\1\75\3\0\1\75\77\0\2\172\1\0\2\173\75\0"
															+ "\2\7\1\71\1\72\3\7\1\0\6\7\1\174\35\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\3\7\1\175\40\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\26\7\1\176\15\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\27\7\1\177"
															+ "\14\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\4\7\1\200\37\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\7\7\1\201\34\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\15\7"
															+ "\1\202\22\7\1\203\3\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\20\7\1\204\20\7\1\205"
															+ "\2\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\15\7\1\206\26\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\20\7\1\207\23\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\44\7"
															+ "\1\0\2\7\1\210\5\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\44\7\1\0\3\7\1\211\4\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\20\7\1\212\23\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\27\7\1\213\14\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\14\7\1\214\27\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\17\7\1\215"
															+ "\24\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\12\7\1\216\31\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\32\7\1\217\11\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\33\7"
															+ "\1\220\10\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\21\7\1\221\22\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\33\7\1\222\10\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\2\7\1\223\41\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\2\7\1\224\1\0\44\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\44\7\1\0\6\7"
															+ "\1\225\1\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\44\7\1\0\7\7\1\226\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\4\7\1\227\37\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\3\7\1\230\40\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\6\7\1\230\35\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\7\7\1\227\34\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\32\7\1\231"
															+ "\11\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\33\7\1\231\10\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\5\7\1\232\36\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\10\7"
															+ "\1\232\33\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\3\7\1\233\40\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\6\7\1\234\35\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\11\7\1\235\32\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\1\7\1\236\42\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\5\7\1\237"
															+ "\36\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\10\7\1\240\33\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\1\7\1\241\42\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\11\7"
															+ "\1\242\32\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\34\7\1\243\1\244\6\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\35\7\1\244"
															+ "\6\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\10\7\1\245\33\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\5\7\1\246\36\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\14\7"
															+ "\1\247\27\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\17\7\1\250\24\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\17\7\1\251\24\7"
															+ "\1\0\10\7\21\0\2\170\1\252\1\0\3\170\1\0"
															+ "\44\170\1\0\10\170\21\0\3\171\1\72\3\171\1\0"
															+ "\44\171\1\0\10\171\25\0\2\172\100\0\2\7\1\71"
															+ "\1\72\2\7\1\253\1\0\44\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\2\7\1\254\41\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\13\7\1\255\30\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\16\7\1\256\25\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\26\7\1\257"
															+ "\15\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\27\7\1\260\14\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\34\7\1\261\7\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\2\7"
															+ "\1\262\41\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\35\7\1\263\6\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\2\7\1\262\1\0\44\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\2\7"
															+ "\1\264\41\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\2\7\1\265\1\0\44\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\2\7\1\266\41\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\2\7\1\266\1\0"
															+ "\44\7\1\0\10\7\21\0\2\7\1\71\1\72\2\7"
															+ "\1\267\1\0\44\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\16\7\1\270\25\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\15\7\1\271"
															+ "\26\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\20\7\1\271\23\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\1\7\1\272\42\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\2\7"
															+ "\1\273\41\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\2\7\1\274\1\0\44\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\11\7\1\275\32\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\2\7\1\276\1\0"
															+ "\44\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\13\7\1\277\30\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\16\7\1\300\25\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\34\7"
															+ "\1\301\7\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\35\7\1\302\6\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\3\7\1\303\40\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\6\7\1\303\35\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\7\7\1\304\34\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\4\7\1\304"
															+ "\37\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\2\7\1\305\41\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\2\7\1\305\1\0\44\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\5\7\1\306"
															+ "\36\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\10\7\1\307\33\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\40\7\1\310\3\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\41\7"
															+ "\1\311\2\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\25\7\1\312\16\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\22\7\1\313\21\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\36\7\1\314\5\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\37\7\1\315\4\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\37\7\1\316"
															+ "\4\7\1\0\10\7\20\0\3\170\1\252\1\0\3\170"
															+ "\1\0\44\170\1\0\10\170\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\7\7\1\317\34\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\4\7\1\320\37\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\5\7\1\321\36\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\10\7\1\322\33\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\5\7\1\323"
															+ "\36\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\10\7\1\324\33\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\5\7\1\325\36\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\10\7"
															+ "\1\325\33\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\1\7\1\326\42\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\1\7\1\327\7\7"
															+ "\1\327\32\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\11\7\1\327\32\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\10\7\1\330\33\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\2\7\1\331\41\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\13\7\1\332\30\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\16\7\1\333"
															+ "\25\7\1\0\10\7\21\0\2\7\1\71\1\72\2\7"
															+ "\1\334\1\0\44\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\16\7\1\335\25\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\2\7\1\336"
															+ "\41\7\1\0\10\7\21\0\2\7\1\71\1\72\2\7"
															+ "\1\336\1\0\44\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\30\7\1\337\13\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\31\7\1\340"
															+ "\12\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\34\7\1\341\7\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\35\7\1\342\6\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\2\7"
															+ "\1\343\41\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\2\7\1\343\1\0\44\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\2\7\1\344\1\0\44\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\2\7\1\345"
															+ "\41\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\44\7\1\0\2\7\1\346\5\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\44\7\1\0\3\7\1\347"
															+ "\4\7\21\0\2\7\1\71\1\72\3\7\1\0\44\7"
															+ "\1\0\3\7\1\350\4\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\10\7\1\351\33\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\5\7\1\351\36\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\1\7\1\352\42\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\11\7\1\353\32\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\34\7\1\354"
															+ "\7\7\1\0\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\35\7\1\355\6\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\5\7\1\356\36\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\10\7"
															+ "\1\357\33\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\11\7\1\360\32\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\5\7\1\361\36\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\44\7\1\362\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\44\7\1\363\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\10\7\1\361\33\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\44\7\1\364\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\44\7\1\0"
															+ "\4\7\1\365\3\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\44\7\1\0\5\7\1\365\2\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\30\7\1\366\13\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\31\7"
															+ "\1\367\12\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\2\7\1\370\1\0\44\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\2\7\1\371\41\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\44\7"
															+ "\1\372\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\44\7\1\373\10\7\21\0\2\7\1\71\1\72\3\7"
															+ "\1\0\44\7\1\374\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\22\7\1\375\21\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\22\7\1\376\2\7"
															+ "\1\376\16\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\14\7\1\377\27\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\17\7\1\u0100\24\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\26\7\1\u0101\15\7\1\0\10\7\21\0\2\7\1\71"
															+ "\1\72\3\7\1\0\27\7\1\u0102\14\7\1\0\10\7"
															+ "\21\0\2\7\1\71\1\72\3\7\1\0\25\7\1\376"
															+ "\16\7\1\0\10\7\73\0\1\u0103\105\0\1\u0104\106\0"
															+ "\1\u0104\32\0\2\7\1\71\1\72\3\7\1\0\4\7"
															+ "\1\u0105\37\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\7\7\1\u0106\34\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\31\7\1\u0107\12\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\30\7\1\u0107\13\7\1\0\10\7\73\0\1\u0108\105\0"
															+ "\1\u0109\106\0\1\u0109\32\0\2\7\1\71\1\72\3\7"
															+ "\1\0\34\7\1\u010a\7\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\35\7\1\u010b\6\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\30\7"
															+ "\1\u010c\13\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\31\7\1\u010c\12\7\1\0\10\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\15\7\1\u010d\26\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\20\7\1\u010e\23\7\1\0\10\7\76\0\1\u010f\106\0"
															+ "\1\u010f\27\0\2\7\1\71\1\72\3\7\1\0\5\7"
															+ "\1\u0110\36\7\1\0\10\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\10\7\1\u0110\33\7\1\0\10\7\76\0"
															+ "\1\u0111\106\0\1\u0111\27\0\2\7\1\71\1\72\3\7"
															+ "\1\0\5\7\1\u0112\36\7\1\0\10\7\21\0\2\7"
															+ "\1\71\1\72\3\7\1\0\10\7\1\u0113\33\7\1\0"
															+ "\10\7\21\0\2\7\1\71\1\72\3\7\1\0\44\7"
															+ "\1\0\2\7\1\u0114\5\7\21\0\2\7\1\71\1\72"
															+ "\3\7\1\0\44\7\1\0\3\7\1\u0114\4\7\21\0"
															+ "\2\7\1\71\1\72\3\7\1\0\23\7\1\u0115\20\7"
															+ "\1\0\10\7\21\0\2\7\1\71\1\72\3\7\1\0"
															+ "\24\7\1\u0115\17\7\1\0\10\7\14\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[15960];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int	ZZ_UNKNOWN_ERROR		= 0;
	private static final int	ZZ_NO_MATCH				= 1;
	private static final int	ZZ_PUSHBACK_2BIG		= 2;

	/* error messages for the codes above */
	private static final String	ZZ_ERROR_MSG[]			= { "Unkown internal scanner error",
			"Error: could not match input", "Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[]	ZZ_ATTRIBUTE			= zzUnpackAttribute();

	private static final String	ZZ_ATTRIBUTE_PACKED_0	= "\3\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"
																+ "\32\1\2\11\3\1\6\11\1\1\1\11\2\1\1\11"
																+ "\2\1\1\0\2\1\1\0\62\1\10\11\3\1\1\0"
																+ "\166\1\3\0\5\1\3\0\6\1\2\0\3\1\2\0"
																+ "\5\1\1\11\1\1\1\11\4\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[277];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader	zzReader;

	/** the current state of the DFA */
	private int				zzState;

	/** the current lexical state */
	private int				zzLexicalState	= YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of the yytext() string
	 */
	private char			zzBuffer[]		= new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int				zzMarkedPos;

	/** the current text position in the buffer */
	private int				zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int				zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int				zzEndRead;

	/** the number of characters up to the start of the matched text */
	private int				yychar;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean			zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean			zzEOFDone;

	/* user code: */
	StringBuffer			string			= new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, -1, yychar, yytext());
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, -1, yychar, value);
	}

	private void scanError() throws QueryParseException {
		StringBuffer buf = new StringBuffer("Lexical Error: Illegal character <").append(yytext())
				.append("> at offset ").append(yychar);
		throw new QueryParseException(buf.toString());
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public Scanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public Scanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 1334) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and
	 * lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yychar = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error
	 * occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 2: { /* ignore */
				}
				case 60:
					break;
				case 15: {
					return symbol(sym.PARAM);
				}
				case 61:
					break;
				case 52: {
					return symbol(sym.HAVING);
				}
				case 62:
					break;
				case 25: {
					return symbol(sym.IS);
				}
				case 63:
					break;
				case 48: {
					return symbol(sym.WHERE);
				}
				case 64:
					break;
				case 45: {
					return symbol(sym.DESC);
				}
				case 65:
					break;
				case 11: {
					return symbol(sym.GT);
				}
				case 66:
					break;
				case 56: {
					return symbol(sym.DISTINCT);
				}
				case 67:
					break;
				case 30: {
					string.append('\t');
				}
				case 68:
					break;
				case 6: {
					return symbol(sym.SUM);
				}
				case 69:
					break;
				case 10: {
					return symbol(sym.LT);
				}
				case 70:
					break;
				case 16: {
					string.setLength(0);
					yybegin(STRING);
				}
				case 71:
					break;
				case 58: {
					return symbol(sym.TIMESTAMP);
				}
				case 72:
					break;
				case 49: {
					return symbol(sym.ILIKE);
				}
				case 73:
					break;
				case 29: {
					return symbol(sym.GTEQ);
				}
				case 74:
					break;
				case 22: {
					return symbol(sym.DOUBLE, yytext());
				}
				case 75:
					break;
				case 40: {
					return symbol(sym.NOT);
				}
				case 76:
					break;
				case 39: {
					return symbol(sym.AND);
				}
				case 77:
					break;
				case 4: {
					return symbol(sym.DIV);
				}
				case 78:
					break;
				case 20: {
					string.append('\\');
				}
				case 79:
					break;
				case 31: {
					string.append('\r');
				}
				case 80:
					break;
				case 53: {
					return symbol(sym.BETWEEN);
				}
				case 81:
					break;
				case 51: {
					return symbol(sym.OFFSET);
				}
				case 82:
					break;
				case 46: {
					return symbol(sym.DATE);
				}
				case 83:
					break;
				case 37: {
					return symbol(sym.ASC);
				}
				case 84:
					break;
				case 7: {
					return symbol(sym.SUB);
				}
				case 85:
					break;
				case 42: {
					return symbol(sym.TYPE);
				}
				case 86:
					break;
				case 3: {
					return symbol(sym.IDENTIFIER, yytext());
				}
				case 87:
					break;
				case 34: {
					string.append('\"');
				}
				case 88:
					break;
				case 38: {
					return symbol(sym.ALL);
				}
				case 89:
					break;
				case 1: {
					scanError();
				}
				case 90:
					break;
				case 55: {
					return symbol(sym.ORDERBY);
				}
				case 91:
					break;
				case 21: {
					yybegin(YYINITIAL);
					return symbol(sym.STRING, string.toString());
				}
				case 92:
					break;
				case 33: {
					string.append('\'');
				}
				case 93:
					break;
				case 41: {
					return symbol(sym.LIKE);
				}
				case 94:
					break;
				case 23: {
					return symbol(sym.OR);
				}
				case 95:
					break;
				case 26: {
					return symbol(sym.IN);
				}
				case 96:
					break;
				case 9: {
					return symbol(sym.EQ);
				}
				case 97:
					break;
				case 19: {
					yybegin(YYINITIAL);
					return symbol(sym.STRING, string.toString());
				}
				case 98:
					break;
				case 35: {
					return symbol(sym.FROM_IDENTIFIER, yytext());
				}
				case 99:
					break;
				case 36: {
					return symbol(sym.PATH_IDENTIFIER, yytext());
				}
				case 100:
					break;
				case 32: {
					string.append('\n');
				}
				case 101:
					break;
				case 54: {
					return symbol(sym.LOCATION);
				}
				case 102:
					break;
				case 28: {
					return symbol(sym.LTEQ);
				}
				case 103:
					break;
				case 24: {
					return symbol(sym.AS);
				}
				case 104:
					break;
				case 12: {
					return symbol(sym.LPARA);
				}
				case 105:
					break;
				case 43: {
					return symbol(sym.FROM);
				}
				case 106:
					break;
				case 50: {
					return symbol(sym.SELECT);
				}
				case 107:
					break;
				case 13: {
					return symbol(sym.RPARA);
				}
				case 108:
					break;
				case 59: {
					return symbol(sym.STARTSWITH);
				}
				case 109:
					break;
				case 27: {
					return symbol(sym.NOTEQ);
				}
				case 110:
					break;
				case 17: {
					string.setLength(0);
					yybegin(SQ_STRING);
				}
				case 111:
					break;
				case 14: {
					return symbol(sym.COMMA);
				}
				case 112:
					break;
				case 8: {
					return symbol(sym.MUL);
				}
				case 113:
					break;
				case 57: {
					return symbol(sym.GROUPBY);
				}
				case 114:
					break;
				case 18: {
					string.append(yytext());
				}
				case 115:
					break;
				case 5: {
					return symbol(sym.INTEGER, yytext());
				}
				case 116:
					break;
				case 44: {
					return symbol(sym.NULL);
				}
				case 117:
					break;
				case 47: {
					return symbol(sym.LIMIT);
				}
				case 118:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						zzDoEOF();
						{
							return new java_cup.runtime.Symbol(sym.EOF);
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}

}
